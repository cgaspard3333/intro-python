.. slide::

Chapitre 5 - Introduction √† ``numpy``
=====================================

üéØ Objectifs du Chapitre
---------------------

.. important:: 
    - D√©couvrir la biblioth√®que ``numpy``, une des biblioth√®ques les plus utilis√©es en Python pour le calcul scientifique et la manipulation de donn√©es num√©riques.
    - Apprendre √† cr√©er et manipuler des tableaux (ou arrays) de donn√©es, √† effectuer des op√©rations math√©matiques efficaces et √† utiliser des fonctions puissantes de numpy.

.. slide::
üìñ Le package ``numpy``
-----------------------

Qu'est-ce que ``numpy`` ?
~~~~~~~~~~~~~~~~~~~~~~~~

.. note::
    ``numpy``(Numerical Python) est une **biblioth√®que de calcul num√©rique** en Python, essentielle pour les projets de data science, de calcul scientifique et d'apprentissage automatique. Elle est optimis√©e pour le **traitement de grandes quantit√©s de donn√©es**, offrant des fonctionnalit√©s pour **cr√©er et manipuler des tableaux multidimensionnels** (appel√©s arrays) et effectuer des **op√©rations math√©matiques complexes de mani√®re rapide et efficace**. Ils sont doncs largement dans les domaines ou la performance est un enjeu, comme le Machine Learning, le traitement d'images, etc.

Les avantages de numpy incluent :

- **Efficacit√©** : Les op√©rations sur les arrays numpy sont souvent beaucoup plus rapides que les listes Python.
- **Simplicit√© syntaxique** : Des op√©rations math√©matiques vectoris√©es qui r√©duisent le code.
- **Large √©cosyst√®me** : Utilis√© par d‚Äôautres biblioth√®ques comme pandas, scipy, scikit-learn.

.. slide::
Installation de ``numpy``
~~~~~~~~~~~~~~~~~~~~~~~~~

Si numpy n‚Äôest pas d√©j√† install√©, vous pouvez l‚Äôinstaller via ``pip`` :

.. code-block:: bash
    pip install numpy

Une fois install√©, il est courant de l‚Äôimporter avec l‚Äôabr√©viation ``np`` pour simplifier son utilisation :

.. code-block:: python
    import numpy as np

.. slide::
Les tableaux ``numpy``
~~~~~~~~~~~~~~~~~~~~~~

Contrairement aux listes Python, les arrays ``numpy`` sont optimis√©s pour contenir des donn√©es de m√™me type (typiquement des nombres) et permettent des op√©rations math√©matiques efficaces.
Un array numpy peut √™tre un tableau 1D (vecteur/liste), un tableau 2D (matrice) ou un tableau de dimensions sup√©rieures.

**Cr√©er un tableau ``numpy``**  
*A) A partir d'une liste Python*  

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        # Cr√©er un array 1D
        tableau_1d = np.array([1, 2, 3, 4, 5])

        # Cr√©er un array 2D (matrice)
        tableau_2d = np.array([[1, 2, 3], [4, 5, 6]])
        
        # La matrice tableau_2d est :
        # ‚é° 1, 2, 3 ‚é§ 
        # ‚é£ 4, 5, 6 ‚é¶

        print("Tableau 1D :", tableau_1d)
        print("Tableau 2D :\n", tableau_2d)

        >> Tableau 1D : [1 2 3 4 5]
        >> Tableau 2D : 
        >> [[1 2 3]
        >> [4 5 6]]

.. slide::
*B) Avec des fonctions pr√©d√©finies*  

- ``np.zeros((n, m))`` : Cr√©e un tableau rempli de z√©ros de taille ``n x m``.
- ``np.ones((n, m))`` : Cr√©e un tableau rempli de uns de taille ``n x m``.
- ``np.arange(start, stop, step)`` : Cr√©e un tableau 1D avec des valeurs allant de ``start`` √† ``stop`` (non inclus) avec un pas ``step``.
- ``np.linspace(start, stop, num)`` : Cr√©e un tableau 1D avec num valeurs √©galement espac√©es entre ``start`` et ``stop``.

.. warning::
    Exemple : 
    .. code-block:: python
        import numpy as np

        zeros = np.zeros((2, 3))
        ones = np.ones((2, 2))
        range_array = np.arange(0, 10, 2)
        linspace_array = np.linspace(0, 1, 5)

        print("Tableau de z√©ros :\n", zeros)
        print("Tableau de uns :\n", ones)
        print("Tableau avec arange :", range_array)
        print("Tableau avec linspace :", linspace_array)

.. slide::
**Acc√©der aux √©l√©ments d'un tableau**

Pour acc√©der aux √©l√©ments d'un tableau numpy, on utilise des indices entre crochets. Les indices commencent √† 0 et peuvent √™tre n√©gatifs pour acc√©der aux √©l√©ments √† partir de la fin.

L‚Äôacc√®s aux √©l√©ments dans un array numpy est similaire aux listes Python, mais peut s‚Äô√©tendre aux tableaux multidimensionnels.
.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

        print(array[0, 1])    # Acc√®de √† l'√©l√©ment de la 1√®re ligne, 2√®me colonne
        >> 2
        print(array[1, :])    # Acc√®de √† toute la 2√®me ligne
        >> [4, 5, 6]
        print(array[:, 2])    # Acc√®de √† toute la 3√®me colonne
        >> [3, 6, 9]

.. slide::
Op√©rations math√©matiques avec ``numpy``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``numpy`` permet d‚Äôeffectuer des op√©rations math√©matiques de mani√®re vectoris√©e, ce qui signifie que les op√©rations s‚Äôappliquent directement sur tous les √©l√©ments d‚Äôun array sans besoin de boucles explicites.

**Op√©rations √©l√©mentaires**
Les op√©rations comme l‚Äôaddition, la soustraction, la multiplication, la division s'appliquent directement sur les arrays.

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        a = np.array([1, 2, 3])
        b = np.array([4, 5, 6])

        print("Addition :", a + b)
        >> Addition : [5 7 9]
        print("Soustraction :", a - b)
        >> Soustraction : [-3 -3 -3]
        print("Multiplication :", a * b)
        >> Multiplication : [4 10 18]
        print("Division :", a / b)
        >> Division : [0.25 0.4  0.5 ]

.. slide::
**Op√©rations math√©matiques avanc√©es**
numpy propose une large gamme de fonctions math√©matiques pour des calculs avanc√©s.

- **Exponentielle** : ``np.exp(array)``
- **Logarithme** : ``np.log(array)``
- **Racine carr√©e** : ``np.sqrt(array)``
- **Puissance** : ``np.power(array, n)``

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        array = np.array([1, 2, 3])

        print("Exponentielle :", np.exp(array))
        >> Exponentielle : [ 2.71828183  7.3890561  20.08553692]
        print("Logarithme :", np.log(array))
        >> Logarithme : [0. 0.69314718 1.09861229]
        print("Racine carr√©e :", np.sqrt(array))
        >> Racine carr√©e : [1. 1.41421356 1.73205081]
        print("Puissance :", np.power(array, 2))
        >> Puissance : [1 4 9]

.. slide::
Fonctions d'agr√©gation
~~~~~~~~~~~~~~~~~~~~~~

Les fonctions d'agr√©gation de ``numpy`` permettent de calculer des statistiques de base sur les arrays.

- **Somme** : ``np.sum(array)``
- **Moyenne** : ``np.mean(array)``
- **√âcart-type** : ``np.std(array)``
- **Variance** : ``np.var(array)``
- **Minimum** : ``np.min(array)``
- **Maximum** : ``np.max(array)``
- **Indice de l'√©l√©ment minimum** : ``np.argmin(array)``
- **Indice de l'√©l√©ment maximum** : ``np.argmax(array)``

Ces fonctions peuvent √©galement √™tre appliqu√©es sur des tableaux multidimensionnels en pr√©cisant l'axe (``axis=0`` pour les colonnes, ``axis=1`` pour les lignes).

.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([[1, 2, 3], [4, 5, 6]])

        print("Somme :", np.sum(array))              # Somme de tous les √©l√©ments
        print("Moyenne :", np.mean(array))           # Moyenne de tous les √©l√©ments
        print("√âcart-type :", np.std(array))         # √âcart-type
        print("Somme par colonne :", np.sum(array, axis=0))  # Somme par colonne
        print("Somme par ligne :", np.sum(array, axis=1))    # Somme par ligne

.. slide::
Manipulation de la forme des arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``numpy`` propose des outils puissants pour manipuler et changer la forme des arrays sans modifier leurs donn√©es.

**Changer la forme d'un array avec reshape**

La fonction ``reshape`` permet de redimensionner un array tout en conservant les m√™mes donn√©es.

.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([1, 2, 3, 4, 5, 6])
        array_reshaped = array.reshape((2, 3))  # Transforme en un array 2x3

        print(array_reshaped)
        >> [[1 2 3]
        >> [4 5 6]]

.. slide::
**Aplatir un array multidimensionnel avec ``flatten``**

La fonction ``flatten`` transforme un array multidimensionnel en un array 1D.

.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([[1, 2, 3], [4, 5, 6]])
        array_flattened = array.flatten()

        print(array_flattened)
        >> [1 2 3 4 5 6]

.. slide::
**Concat√©ner des arrays avec ``concatenate``**

La fonction ``concatenate`` permet de concat√©ner des arrays le long d'un axe donn√©.

.. warning::
    Exemple 1 :
    .. code-block:: python
        a = np.array([[1, 2], [3, 4]])
        b = np.array([[5, 6]])

        # Concat√®ne les arrays le long de l'axe 0 (colonne)
        c = np.concatenate((a, b), axis=0)  

        print(c)
        >> [[1 2]
        >> [3 4]
        >> [5 6]]

        d = np.concatenate((a, b), axis=1)

        # Les dimensions des arrays ne correspondent pas pour la concat√©nation le long de l'axe 1.
        >> ValueError: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 2 and the array at index 1 has size 1

    Exemple 2 :
    .. code-block:: python
        array1 = np.array([1, 2, 3])
        array2 = np.array([4, 5, 6])

        # Concat√®ne les arrays le long de l'axe 1 (ligne) par d√©faut
        array_concatenated = np.concatenate((array1, array2))

        print(array_concatenated) 
        >> [1 2 3 4 5 6]

.. slide::
Indexation et filtrage avanc√©s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``numpy`` offre des fonctionnalit√©s avanc√©es pour s√©lectionner des √©l√©ments sp√©cifiques dans un array en fonction de certaines conditions.

**Indexation par masque bool√©en**

L'indexation par masque bool√©en permet de s√©lectionner des √©l√©ments d'un array en fonction d'une condition donn√©e.

.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([1, 2, 3, 4, 5, 6])

        # S√©lectionner les √©l√©ments sup√©rieurs √† 3
        mask = array > 3
        print(array[mask])
        
        >> [4 5 6]

.. slide::
**Indexation par position**

On peut s√©lectionner plusieurs √©l√©ments en utilisant des listes d'indices.

.. warning::
    Exemple :
    .. code-block:: python
        array = np.array([10, 20, 30, 40, 50])

        indices = [0, 2, 4]
        print(array[indices])
        
        >> [10 30 50]

.. slide::
**Modification d'√©lements via un masque**

On peut √©galement modifier les valeurs d'un array en utilisant un masque bool√©en.

.. warning::
    Exemple 1:
    .. code-block:: python
        array = np.array([1, 2, 3, 4, 5])

        array[array > 3] = 0  # Remplace les valeurs sup√©rieures √† 3 par 0
        print(array) 
        
        >> [1 2 3 0 0]

    Exemple 2:
    .. code-block:: python
        array = np.array([8, 3, 6, 1, 2])

        mask = (array > 1) & (array < 5)  # Cr√©e un masque bool√©en
        array[mask] = 0  # Remplace les valeurs entre 2 et 5 par 0
        print(array) 
        
        >> [8 0 6 1 0]
    
.. slide::
G√©n√©ration de nombres al√©atoires avec ``numpy``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``numpy`` propose des fonctions pour g√©n√©rer des nombres al√©atoires selon diff√©rentes distributions.

**Nombres al√©atoires entre 0 et 1**

``np.random.rand()`` g√©n√®re des nombres al√©atoires √† virgule flottante entre 0 et 1.

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        random_values = np.random.rand(5)
        print(random_values)  
        
        >> [0.572 0.832 0.453 0.271 0.928]

.. slide::
**Nombres al√©atoires entiers**

``np.random.randint(start, stop, size)`` g√©n√®re des nombres entiers al√©atoires entre ``start`` (inclus) et ``stop`` (exclus), avec la taille sp√©cifi√©e.

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        random_integers = np.random.randint(1, 10, size=(2, 3))
        print(random_integers)  
        
        >> [[3 5 8]
        >> [2 6 9]]

.. slide::
**Echantillonage al√©atoire**

``np.random.choice(array, size, replace)`` permet de tirer al√©atoirement des √©l√©ments d'un array avec l'array de d√©part (``array``), la taille de l'√©chantillon (``size``) et si les √©l√©ments peuvent √™tre tir√©s plusieurs fois (``replace=True``).

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        array = np.array([1, 2, 3, 4, 5])

        # Echantillon de 3 √©l√©ments sans qu'un √©l√©ment puisse √™tre tir√© plusieurs fois (remplacement=False)
        random_sample = np.random.choice(array, 3, replace=False)
        print(random_sample)  
        
        >> [3 1 5]

.. slide::
**Graine al√©atoire (seed)**

Lorsque vous utilisez des fonctions de g√©n√©ration de nombres al√©atoires (comme celles de ``numpy`` ou celle du module ``random``), les valeurs g√©n√©r√©es changent √† chaque ex√©cution du programme. Cependant, il peut √™tre utile de contr√¥ler la g√©n√©ration al√©atoire pour reproduire des r√©sultats identiques lors de tests ou de simulations. Cela est possible gr√¢ce √† une seed (ou graine).

Une seed est un point de d√©part pour l‚Äôalgorithme de g√©n√©ration de nombres pseudo-al√©atoires. En fixant cette seed, vous vous assurez que les valeurs al√©atoires g√©n√©r√©es seront toujours les m√™mes, tant que la seed reste la m√™me.

La fonction ``np.random.seed()`` permet de fixer la seed. Une fois la seed d√©finie, les appels aux fonctions al√©atoires de numpy produiront toujours les m√™mes r√©sultats.

.. warning::
    Exemple :
    .. code-block:: python
        import numpy as np

        # Fixer la seed
        np.random.seed(42)

        # G√©n√©rer des nombres al√©atoires
        random_values = np.random.rand(5)
        print("Valeurs al√©atoires avec seed 42 :", random_values)
        
        >> Valeurs al√©atoires avec seed 42 : [0.37454012 0.95071431 0.73199394 0.59865848 0.15601864]

Chaque fois que vous ex√©cuterez ce code, il produira les m√™mes valeurs al√©atoires pour ``random_values``, car la seed a √©t√© fix√©e √† la valeur ``42``. Si vous ex√©cutez le code sans d√©finir de seed, les valeurs g√©n√©r√©es seront diff√©rentes √† chaque fois.

.. slide::
‚úèÔ∏è Exercice 14 : Pratiquer avec ``numpy``
---------------------------------------

**Consigne** : Dans un m√™me script Python, r√©alisez les actions suivantes. Pour y r√©pondre vous pouvez en premier lieu utiliser le cours ci-dessus, puis consulter la documentation de ``numpy`` sur internet pour y trouver les fonctions n√©cessaires.  
Interdiction d'utiliser des boucles ``for`` ou ``while`` (sauf explicitement demand√©), les op√©rations vectoris√©es de ``numpy`` permettent de r√©aliser des op√©rations sur l'ensemble des √©l√©ments d'un array sans avoir √† utiliser de boucles (et surtout le temps de calcul en est r√©duit).

.. note::
    Tout au long de l'exercice, d√®s qu'il sera demand√© de cr√©er un array al√©atoire, vous devrez **fixer la seed √† 42**.

.. slide::
**Questions simples** :

.. step:: reset
    A quoi sert de fixer la seed al√©atoire dans un programme ?

.. step::
    Cr√©er un array nul de taille 100.

.. step::
    Cr√©er un array de taille 10 avec des valeurs al√©atoires entre 0 et 1.

.. step::
    Cr√©er un array nul de taille 10 mais dont la septi√®me valeur est √©gale √† 1.

.. step::
    Cr√©er un array 2D identit√© de taille (3, 3) (On appelle une matrice identit√© une matrice carr√©e dont tous les √©l√©ments sont nuls, sauf ceux de la diagonale principale qui sont √©gaux √† 1).

.. step:: 
    Cr√©er un array de taille 10 avec des valeurs enti√®res al√©atoires entre 1 et 10, puis remplacer les valeurs sup√©rieures √† 5 par 0.

.. step::
    Cr√©er un array de taille 10 avec des valeurs al√©atoires entre 1 et 10, puis remplacer les valeurs entre 3 et 7 par 0.

.. step::
    Cr√©er un array de taille 40 al√©atoire et calculer sa valeur moyenne (utiliser les fonctions de numpy)

.. step::
    Cr√©er un array de taille 30 al√©atoire et trouver ses valeur maximale et minimale (utiliser les fonctions de numpy)

.. step::
    Cr√©er un array de taille 20 al√©atoire et calculer la somme de ses valeurs (utiliser les fonctions de numpy)

.. step::
    Cr√©er un array 2D de taille (4, 4) avec des 1 sur les bords et des 0 √† l'int√©rieur.

.. step::
    Cr√©er un array 2D de taille (2, 2), puis lui ajouter une bordure de 0 tout autour.

.. step::
    Cr√©er un array 2D de taille (5, 5) avec les valeurs 1, 2, 3, 4 juste en dessous de la diagonale principale.

.. step::
    Cr√©er un array 2D de taille (10,10) et remplir ses valeurs de sorte √† cr√©er un damier (alternance de 0 et 1) sans utiliser la fonction ``np.tile()``.

.. step::
    Cr√©er un array 2D de taille (6, 6) et remplir ses valeurs de sorte √† cr√©er un damer en utilisant la fonction ``np.tile()``.

.. step::
    Normaliser un array de taille 50 al√©atoire et expliquer ce que signifie la normalisation.

.. step:: 
    Multiplier un array 2D al√©atoire de taille (5, 4) par l'array 2D al√©atoire de taille (4, 2). 

.. step::
    Expliquer comment trouver des valeurs communes entre deux arrays.

.. slide::
**Questions plus complexes** :

.. step::
    Trouver la partie enti√®re d'un array al√©atoire dont les valeurs sont uniquement positives en utilisant 3 m√©thodes diff√©rentes.

.. step::
    Cr√©er un array 2D de taille (6, 6) dont les valeurs de chaque lignes dont les nombres entiers allant de 0 √† 5.

.. step::
    Cr√©er une fonction qui g√©n√®re des nombres al√©atoires, puis l'utiliser pour g√©n√©rer un array de taille 10.

.. step::
    Cr√©er un array de taille 15 al√©atoire, puis trier ses valeurs.

.. step::
    Cr√©er deux arrays puis v√©rifier s'ils sont √©gaux.

.. step::
    Cr√©er un array et le rendre immuable (non modifiable).

.. step::
    Cr√©er un array al√©atoire de taille 15 puis remplacer sa valeur minimale par 100.

.. step::
    Convertir un array de float (32bits) en un array de int (32bits).

.. step::
    Expliquer comment v√©rifier si un array contient des colonnes nulles.

.. step::
    Comment trouver la valeur la plus fr√©quente dans un array ?

.. step::
    Cr√©er un array de taille 10 al√©atoire, puis √©changer les lignes 3 et 6.

.. slide::
‚úèÔ∏è Exercice 15 : Encore et toujours la m√©teo !
---------------------------------------

**Objectifs** :
Dans cet exercice, vous allez utiliser **numpy** pour analyser et manipuler des donn√©es m√©t√©orologiques. Vous allez simuler des relev√©s de temp√©ratures sur 30 jours, calculer des statistiques et identifier des tendances.

.. note::
    Tout au long de l'exercice, d√®s qu'il sera demand√© de cr√©er un array al√©atoire, vous devrez **fixer la seed √† 42**.

**Consignes** :

.. step:: reset
    **G√©n√©ration des donn√©es de temp√©rature** :

        - Utilisez ``numpy.random.normal()`` pour g√©n√©rer un tableau de 30 temp√©ratures al√©atoires, avec une moyenne de 20¬∞C et un √©cart-type de 5¬∞C.
.. step::
    **Calcul des statistiques descriptives** :
    
        - Calculez la temp√©rature moyenne du mois 
        - Calculez la temp√©rature m√©diane
        - Calculez l'√©cart-type des temp√©ratures
.. step::
    **Analyse des temp√©ratures** :
   
        - Cr√©ez un tableau des jours (indices) o√π la temp√©rature est sup√©rieure √† la moyenne.
        - Trouvez l'indice du jour le plus chaud et le jour le plus froid.
        - Comptez le nombre de jours o√π la temp√©rature d√©passe 25¬∞C.

.. step::
    **Affichage des r√©sultats** :
   
        - Imprimez les jours o√π la temp√©rature est sup√©rieure √† la moyenne.
        - Affichez les num√©ros et les valeurs des jours les plus chauds et les plus froids.
        - Montrez combien de jours ont une temp√©rature sup√©rieure √† 25¬∞C.

.. step::
    **Analyse comparative des temp√©ratures** :
   
        - Ajoutez une fonctionnalit√© qui identifie les p√©riodes cons√©cutives o√π la temp√©rature reste au-dessus de 22¬∞C pendant au moins 2 jours.
        - Impl√©mentez une recherche des jours de baisse soudaine de temp√©rature (plus de 5¬∞C de chute d'un jour √† l'autre).
        - Cr√©ez un tableau de temp√©ratures pour 30 jours suppl√©mentaires, avec une moyenne de 22¬∞C et un √©cart-type de 4¬∞C.
        - Comparez les deux tableaux de temp√©ratures en affichant les jours o√π la temp√©rature est plus √©lev√©e dans le deuxi√®me tableau.

**R√©sultat attendu** :
.. code-block:: bash
    >> Donn√©es de temp√©rature g√©n√©r√©es pour 30 jours : [22.48357077 19.30867849 23.23844269 27.61514928 18.82923313 18.82931522
    >> 27.89606408 23.83717365 17.65262807 22.71280022 17.68291154 17.67135123
    >> 21.20981136 10.43359878 11.37541084 17.18856235 14.9358444  21.57123666
    >> 15.45987962 12.93848149 27.32824384 18.8711185  20.33764102 12.87625907
    >> 17.27808638 20.55461295 14.24503211 21.87849009 16.99680655 18.54153125] 

    >> R√©sultats des statistiques descriptives :
    >> - Temp√©rature moyenne : 19.06¬∞C
    >> - Temp√©rature m√©diane : 18.83¬∞C
    >> - √âcart-type des temp√©ratures : 4.42¬∞C

    >> Analyse des temp√©ratures :
    >> - Jours avec temp√©rature sup√©rieure √† la moyenne : [ 1  2  3  4  7  8 10 13 18 21 23 26 28]
    >> - Jour le plus chaud : Jour 7 avec 27.90¬∞C
    >> - Jour le plus froid : Jour 14 avec 10.43¬∞C
    >> - Nombre de jours avec une temp√©rature sup√©rieure √† 25¬∞C : 3

    >> Analyse comparative des temp√©ratures :
    >> - P√©riodes avec temp√©rature > 22¬∞C pendant au moins 2 jours cons√©cutifs : [3, 7]
    >> - Jours avec chute soudaine de temp√©rature (> 5¬∞C) : [5, 9, 11, 14, 19, 22, 24, 27]
    >> - Jours o√π la temp√©rature dans le deuxi√®me tableau est plus √©lev√©e que dans le premier : [ 2  5 10 11 12 13 14 15 16 17 18 19 20 22 24 25 26 27 29 30]

.. slide::
‚úÖ R√©capitulatif de Chapitre
-------------------------

- **Qu'est-ce que ``numpy`` ?**
  - Biblioth√®que essentielle pour les projets de data science, calcul scientifique et apprentissage automatique.
  - Optimis√©e pour le traitement de grandes quantit√©s de donn√©es num√©riques.
  - Offre des fonctionnalit√©s pour cr√©er et manipuler des arrays et effectuer des op√©rations math√©matiques complexes rapidement.

- **Avantages de ``numpy`` :**
  - **Efficacit√©** : Op√©rations sur les arrays plus rapides que sur les listes Python.
  - **Syntaxe simplifi√©e** : Op√©rations math√©matiques vectoris√©es r√©duisant le code.
  - **√âcosyst√®me √©tendu** : Utilis√© par d'autres biblioth√®ques comme pandas, scipy, scikit-learn.

- Installation via ``pip`` : ``pip install numpy``

- Importation standard : ``import numpy as np``

.. slide::
Cr√©ation et Manipulation des Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Cr√©er un array √† partir d'une liste :**

.. code-block:: python

    array_1d = np.array([1, 2, 3, 4, 5])
    array_2d = np.array([[1, 2, 3], [4, 5, 6]])

- **Utiliser des fonctions pr√©d√©finies :**

  - ``np.zeros((n, m))`` : Array de z√©ros de taille n x m.
  - ``np.ones((n, m))`` : Array de uns de taille n x m.
  - ``np.arange(start, stop, step)`` : Valeurs de start √† stop avec un pas step.
  - ``np.linspace(start, stop, num)`` : num valeurs √©galement espac√©es entre start et stop.

.. slide::
Acc√®s aux √âl√©ments et Slicing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Acc√©der aux √©l√©ments avec des indices :

.. code-block:: python

    element = array[i, j]        # i: ligne, j: colonne
    row = array[i, :]            # i-√®me ligne
    column = array[:, j]         # j-√®me colonne

.. slide::
Op√©rations Math√©matiques avec ``numpy``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Op√©rations √©l√©mentaires :** Addition, soustraction, multiplication, division appliqu√©es √©l√©ment par √©l√©ment. (``+, -, *, /``)

- **Fonctions math√©matiques avanc√©es :**

  - Exponentielle : ``np.exp(array)``
  - Logarithme : ``np.log(array)``
  - Racine carr√©e : ``np.sqrt(array)``
  - Puissance : ``np.power(array, n)``

.. slide::
Fonctions d'Agr√©gation
~~~~~~~~~~~~~~~~~~~~~~

- **Calcul de statistiques sur les arrays** :

  - Somme : ``np.sum(array)``
  - Moyenne : ``np.mean(array)``
  - √âcart-type : ``np.std(array)``
  - Minimum/Maximum : ``np.min(array)``, ``np.max(array)``
  - Indice du min/max : ``np.argmin(array)``, ``np.argmax(array)``

- Application sur des axes sp√©cifiques avec l'argument ``axis``.

.. slide::
Manipulation de la Forme des Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Changer la forme avec ``reshape`` :**  ``array.reshape((nouvelle_lignes, nouvelle_colonnes))``

- **Aplatir un array avec ``flatten`` :** ``array_flat = array.flatten()``

- **Concat√©ner des arrays avec ``concatenate`` :** ``np.concatenate((array1, array2), axis=0)``

.. slide::
Indexation et Filtrage Avanc√©s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Indexation bool√©enne :**

.. code-block:: python

    mask = array > valeur
    filtered_array = array[mask]

- **Indexation par position :**

.. code-block:: python

    indices = [0, 2, 4]
    selected_elements = array[indices]

- **Modification via un masque :** ``array[array > valeur] = nouvelle_valeur``

.. slide::
G√©n√©ration de Nombres Al√©atoires
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Nombres al√©atoires entre 0 et 1 :** ``np.random.rand(n)``

- **Nombres entiers al√©atoires :** ``np.random.randint(debut, fin, size)``

- **√âchantillonnage al√©atoire :** ``np.random.choice(array, size, replace)``

- **Fixer la seed pour reproductibilit√© :** ``np.random.seed(fixed_seed)``

.. slide::
üèãÔ∏è Exercices suppl√©mentaires
--------------------

.. toctree::

    exos_sup_chap5