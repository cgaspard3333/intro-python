.. slide::

Chapitre 3 - Fonctions, types construits et modules
===================================================

Objectifs
---------

.. important:: 
    - Comprendre ce qu'est une fonction en Python et apprendre √† les d√©finir et √† les utiliser.
    - D√©couvrir l‚Äôimportance de la r√©utilisation du code et de la modularit√© gr√¢ce aux fonctions.
    - Introduction aux types construits (listes, tuples, dictionnaires).
    - Apprendre √† utiliser des modules pour organiser et enrichir les programmes.

.. slide::
üìñ Les fonctions
----------------

Qu'est-ce qu'une fonction ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Une fonction est un **bloc de code r√©utilisable** qui permet d'effectuer une t√¢che sp√©cifique. Elle prend en entr√©e des **arguments** et retourne un **r√©sultat**. Les fonctions permettent de **d√©couper un programme en sous-programmes** plus petits et plus faciles √† g√©rer.  

.. slide::
**D√©finir une fonction**

En Python, une fonction se d√©finit avec le mot-cl√© ``def`` suivi du nom de la fonction, des parenth√®ses (qui peuvent contenir des param√®tres), et d‚Äôun bloc de code indent√©.

.. warning::
    Exemple :
    .. code-block:: python
        def nom_de_la_fonction(param1, param2):
            # Bloc de code qui s'ex√©cute
            return r√©sultat  # (optionnel)

.. slide::
Pour **appeler** une fonction (c'est √† dire l'ex√©cuter), on utilise son nom suivi de parenth√®ses contenant les arguments √† passer √† la fonction.

.. warning::
    Exemple :
    .. code-block:: python
        def addition(a, b):
            c = a + b
            return c

        print(addition(2, 3))
        >> 5

.. slide::
**Param√®tres et arugments**
.. discoverList::
    * Les **param√®tres** sont des variables d√©finies dans la d√©claration de la fonction.
    * Les **arguments** sont les valeurs que l‚Äôon passe √† la fonction lorsqu‚Äôon l‚Äôappelle.

.. warning::
    Exemples :
    .. code-block:: python
        def addition(a, b):  # a et b sont les param√®tres
            c = a + b
            return c
            
    ``a`` et ``b`` sont les **param√®tres** de la fonction. Ce sont des variables locales √† la fonction qui re√ßoivent des valeurs lorsque la fonction est appel√©e. 

    .. code-block:: python
        print(addition(2, 3))  # 2 et 3 sont les **arguments** pass√©s √† la fonction
        >> 5

    ``5`` et ``3`` sont les **arguments**. Ce sont les valeurs que l'on passe √† la fonction lorsque celle-ci est appel√©e. Ces valeurs sont affect√©es aux param√®tres ``a`` et ``b`` √† l'int√©rieur de la fonction.

.. slide::
**Valeurs de retour (*return*)**

Une fonction peut **retourner** une valeur avec l‚Äôinstruction ``return``. Si aucune valeur n'est retourn√©e, Python renvoie ``None`` par d√©faut. La valeur retourn√©e peut √™tre de n'importe quel type (entier, cha√Æne de caract√®res, liste, etc.). La valeur retourn√©e est la valeur par laquelle est remplac√©e l'appel de la fonction.

.. warning::
    Exemple :
    .. code-block:: python
        def addition(a, b):
            c = a + b
            return c # Retourne la somme des deux param√®tres

        print(addition(2, 3)) # addition(2, 3) est remplac√© par la valeur 
                              # retourn√©e par la fonction ce qui donne : print(5)
        >> 5

    Dans cet exemple, la fonction ``addition`` retourne la somme des deux param√®tres ``a`` et ``b``. Lorsque la fonction est appel√©e avec les arguments ``2`` et ``3``, elle retourne la valeur ``5`` qui est affich√©e par la fonction ``print()``.

.. slide::
**Port√©e des variables**

.. note::
    Les variables d√©finies √† l‚Äôint√©rieur d‚Äôune fonction sont **locales** √† cette fonction. Cela signifie qu'**elles ne sont pas accessibles en dehors de la fonction**.

.. warning::
    Exemple :
    .. code-block:: python
        def fonction_a():
            x = 10  # Variable locale
        return x

        print(x) # La variable x n'est pas accessible en dehors de la fonction
        >> NameError: name 'x' is not defined

.. slide::
‚úèÔ∏è Exercice 7 : Calculatrice simple avec fonctions
--------------------------------------------------

**Objectif** : √âcrire un programme qui permet de r√©aliser des op√©rations arithm√©tiques simples (addition, soustraction, multiplication, division) √† l'aide de fonctions.

**Etapes √† suivre** :

.. step:: 
    Cr√©er une fonction ``addition(a, b)`` qui prend en param√®tre deux nombres et retourne leur somme.
.. step:: 
    Cr√©er une fonction ``soustraction(a, b)`` qui prend en param√®tre deux nombres et retourne leur diff√©rence.
.. step:: 
    Cr√©er une fonction ``multiplication(a, b)`` qui prend en param√®tre deux nombres et retourne leur produit.
.. step:: 
    Cr√©er une fonction ``division(a, b)`` qui prend en param√®tre deux nombres et retourne leur quotient.
.. step:: 
    Demander √† l'utilisateur de saisir deux nombres et une op√©ration arithm√©tique √† r√©aliser. Pour choisir l'op√©ration, l'utilisateur doit saisir un symbole associ√© (``+``, ``-``, ``*``, ``/``).
.. step:: 
    Utiliser les fonctions pr√©c√©demment cr√©√©es pour afficher le r√©sultat de l'op√©ration demand√©e.

.. slide::
üìñ Les types construits
------------------------

A partir des types de base, on peut construire des types plus complexes appel√©s **types construits**. Les types construits les plus courants sont les listes, les p-uplets et les dictionnaires, ils sont g√©n√©riques et peuvent √™tre mis en oeuvre dans de nombreux langages de programmation. 

.. slide::
Les p-uplets (*tuple*)
~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un p-uplet est une **collection ordonn√©e d'√©l√©ments**. Chaque √©l√©ment peut √™tre de n'importe quel type. Les p-uplets sont **immuables**, c'est-√†-dire qu'ils ne peuvent pas √™tre modifi√©s apr√®s leur cr√©ation. Si les valeurs du p-uplet doivent √™tre chang√©es au cours de l'execution du programme alors il faut utiliser un autre type de type de variable comme une liste/tableau (voir partie suivante : :doc:`Les tableaux <chap3#tableaux>`).

.. slide::
**Cr√©ation d'un p-uplet**

Pour cr√©er un p-uplet, on utilise des **parenth√®ses** et on s√©pare les √©l√©ments par des **virgules**.

.. warning::
    Exemple : 
    .. code-block:: python

        # Cr√©ation d'un p-uplet
        p = (1, 2, 3, 4, 5)
        print(p)
        >> (1, 2, 3, 4, 5)

.. note::
    **Un p-uplet ne contenant qu'un seul √©l√©ment doit √™tre suivi d'une virgule**. Cela permet de diff√©rencier un p-uplet d'une expression entre parenth√®ses.
.. warning::
    Exemple : ``p = (1,)`` et non ``p = (1)``

.. slide::
**Acc√®s aux √©l√©ments d'un p-uplet**

Pour acc√©der √† un √©l√©ment d'un p-uplet, on utilise l'index de l'√©l√©ment (sa position dans le p-uplet). Pour un p-uplet de taille n, les indexs des √©l√©ments vont de 0 √† n-1.  

``p[i]`` permet d'acc√©der √† l'√©l√©ment √† l'index ``i`` du p-uplet ``p``.

.. warning::
    Exemple :
    .. code-block:: python
        
        p = (1, 2, 3, 4, 5)
        print(p[0]) # Permet d'acc√©der √† l'√©l√©ment √† l'index 0 du p-uplet p
        >> 1
        print(p[4]) # Permet d'acc√©der √† l'√©l√©ment en 5eme position (index 4) du p-uplet p
        >> 5

.. slide::
La fonction ``len()`` permet de conna√Ætre la taille d'un p-uplet. Elle permet par exemple d'acc√©der au dernier √©l√©ment d'un p-uplet.

.. warning::
    Exemple :
    .. code-block:: python

        p = (6, 7, 8, 9, 10)
        print(len(p)) # Permet de conna√Ætre la taille du p-uplet p
        >> 5
        print(p[len(p)-1]) # Permet d'acc√©der au dernier √©l√©ment du p-uplet p
        >> 10

.. _tableaux:

.. slide::
Les tableaux / Les listes (*list*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un tableau est une collection ordonn√©e d'√©l√©ments qui sont organis√©s s√©quentiellements (les uns √† la suite des autres). Contrairement aux p-uplets, les tableaux sont **mutables/muables**, c'est-√†-dire qu'ils peuvent √™tre modifi√©s apr√®s leur cr√©ation.  
    En Python, les tableaux sont appel√©s **listes**.

.. slide::
**Cr√©ation d'une liste**

Les listes sont cr√©√©es en utilisant des **crochets** et en s√©parant les √©l√©ments par des **virgules**.

.. warning::
    Exemple :
    .. code-block:: python

        # Cr√©ation d'une liste
        l = [1, 2, 3, 4, 5]
        print(l)
        >> [1, 2, 3, 4, 5]

.. slide::
**Acc√®s aux √©l√©ments d'une liste**

De la m√™me mani√®re que pour un p-uplet, pour acc√©der √† un √©l√©ment d'une liste, on utilise l'index de l'√©l√©ment. Pour une liste de taille n, les indexs des √©l√©ments vont de 0 √† n-1.  

``l[i]`` permet d'acc√©der √† l'√©l√©ment √† l'index ``i`` de la liste ``l``.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        print(l[0]) # Permet d'acc√©der √† l'√©l√©ment √† l'index 0 de la liste l
        >> 1
        print(l[4]) # Permet d'acc√©der √† l'√©l√©ment en 5eme position (index 4) de la liste l
        >> 5

.. slide::
**Modification d'une liste par affectation**

Pour modifier un √©l√©ment d'une liste, on utilise l'index de l'√©l√©ment et on lui affecte une nouvelle valeur.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        l[1] = 10 # Modifie la valeur de l'√©l√©ment √† l'index 0 de la liste l
        print(l)
        >> [1, 10, 3, 4, 5]

.. slide::
**Ajout/suppression d'√©l√©ments d'une liste**
.. discoverList::
    * Pour ajouter un √©l√©ment √† une liste, on utilise la m√©thode ``append()``.
    * Pour supprimer un √©l√©ment d'une liste, on utilise la m√©thode ``remove()``.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        l.append(6) # Ajoute l'√©l√©ment 6 √† la fin de la liste l
        print(l)
        >> [1, 2, 3, 4, 5, 6]

        l.remove(3) # Supprime l'√©l√©ment 3 de la liste l
        print(l)
        >> [1, 2, 4, 5, 6]

.. slide::
Les dictionnaires (*dict*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un dictionnaire est une collection d'√©l√©ments **non ordonn√©e**. Chaque √©l√©ment est constitu√© d'une **cl√©** et d'une **valeur**. Les dictionnaires sont **mutables/muables**.