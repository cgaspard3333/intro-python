.. slide::

Chapitre 3 - Fonctions et types construits
==========================================

üéØ Objectifs du Chapitre
---------------------

.. important:: 
    - Comprendre ce qu'est une fonction en Python et apprendre √† les d√©finir et √† les utiliser.
    - D√©couvrir l‚Äôimportance de la r√©utilisation du code et de la modularit√© gr√¢ce aux fonctions.
    - Introduction aux types construits (listes, tuples, dictionnaires).

.. slide::
üìñ Les fonctions
----------------

Qu'est-ce qu'une fonction ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Une fonction est un **bloc de code r√©utilisable** qui permet d'effectuer une t√¢che sp√©cifique. Elle prend en entr√©e des **arguments** et retourne un **r√©sultat**. Les fonctions permettent de **d√©couper un programme en sous-programmes** plus petits et plus faciles √† g√©rer.  

.. slide::
D√©finir une fonction
~~~~~~~~~~~~~~~~~~~~

En Python, une fonction se d√©finit avec le mot-cl√© ``def`` suivi du nom de la fonction, des parenth√®ses (qui peuvent contenir des param√®tres), et d‚Äôun bloc de code indent√©.

.. warning::
    Exemple :
    .. code-block:: python
        def nom_de_la_fonction(param1, param2):
            # Bloc de code qui s'ex√©cute
            return r√©sultat  # (optionnel)

.. slide::
Pour **appeler** une fonction (c'est √† dire l'ex√©cuter), on utilise son nom suivi de parenth√®ses contenant les arguments √† passer √† la fonction.

.. warning::
    Exemple :
    .. code-block:: python
        def addition(a, b):
            c = a + b
            return c

        print(addition(2, 3))
        >> 5

.. slide::
Param√®tres et arguments
~~~~~~~~~~~~~~~~~~~~~~~
.. discoverList::
    * Les **param√®tres** sont des variables d√©finies dans la d√©claration de la fonction.
    * Les **arguments** sont les valeurs que l‚Äôon passe √† la fonction lorsqu‚Äôon l‚Äôappelle.

.. warning::
    Exemples :
    .. code-block:: python
        def addition(a, b):  # a et b sont les param√®tres
            c = a + b
            return c
            
    ``a`` et ``b`` sont les **param√®tres** de la fonction. Ce sont des variables locales √† la fonction qui re√ßoivent des valeurs lorsque la fonction est appel√©e. 

    .. code-block:: python
        print(addition(2, 3))  # 2 et 3 sont les **arguments** pass√©s √† la fonction
        >> 5

    ``2`` et ``3`` sont les **arguments**. Ce sont les valeurs que l'on passe √† la fonction lorsque celle-ci est appel√©e. Ces valeurs sont affect√©es aux param√®tres ``a`` et ``b`` √† l'int√©rieur de la fonction.

.. slide::
Valeurs de retour (*return*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Une fonction peut **retourner** une valeur avec l‚Äôinstruction ``return``. Si aucune valeur n'est retourn√©e, Python renvoie ``None`` par d√©faut. La valeur retourn√©e peut √™tre de n'importe quel type (entier, cha√Æne de caract√®res, liste, etc.). La valeur retourn√©e est la valeur par laquelle est remplac√©e l'appel de la fonction.

.. warning::
    Exemple :
    .. code-block:: python
        def addition(a, b):
            c = a + b
            return c # Retourne la somme des deux param√®tres

        print(addition(2, 3)) # addition(2, 3) est remplac√© par la valeur 
                              # retourn√©e par la fonction ce qui donne : print(5)
        >> 5

    Dans cet exemple, la fonction ``addition`` retourne la somme des deux param√®tres ``a`` et ``b``. Lorsque la fonction est appel√©e avec les arguments ``2`` et ``3``, elle retourne la valeur ``5`` qui est affich√©e par la fonction ``print()``.

.. slide::
Port√©e des variables
~~~~~~~~~~~~~~~~~~~~

.. note::
    Les variables d√©finies √† l‚Äôint√©rieur d‚Äôune fonction sont **locales** √† cette fonction. Cela signifie qu'**elles ne sont pas accessibles en dehors de la fonction**.

.. warning::
    Exemple :
    .. code-block:: python
        def fonction_a():
            x = 10  # Variable locale
            return x

        print(x) # La variable x n'est pas accessible en dehors de la fonction
        >> NameError: name 'x' is not defined

.. slide::
Annotations de type
~~~~~~~~~~~~~~~~~~~

Une fonction peut √™tre annot√©e avec des types de donn√©es pour indiquer le type des param√®tres et de la valeur de retour. Elles permettent de documenter le code et d'am√©liorer sa lisibilit√©. De plus, elles permettent de d√©tecter de potentielles erreurs de typage lors de l'ex√©cution du programme.
.. note::
    **Les annotations de type (ou encore typage) font partie des bonnes m√©thodes de programmation que vous devez adopter.** Il faudra donc les utiliser dans chaque fonction que vous √©crirez dans vos programmes.

.. warning::
    Exemple :
    .. code-block:: python
        #Fonction addition sans annotations de type
        def addition(a, b):
            c = a + b
            return c

        #Fonction addition avec annotations de type
        def addition(a: int, b: int) -> int:
            c = a + b
            return c

    Dans cet exemple, les annotations de type indiquent que les param√®tres ``a`` et ``b`` ainsi que la valeur de retour de la fonction ``addition`` sont des entiers.

.. slide::
‚úèÔ∏è Exercice 7 : Calculatrice simple avec fonctions
--------------------------------------------------

**Objectif** : √âcrire un programme qui permet de r√©aliser des op√©rations arithm√©tiques simples (addition, soustraction, multiplication, division) √† l'aide de fonctions.

**Etapes √† suivre** :

.. step:: 
    Cr√©er une fonction ``addition(a, b)`` qui prend en param√®tre deux nombres entiers et retourne leur somme.
.. step:: 
    Cr√©er une fonction ``soustraction(a, b)`` qui prend en param√®tre deux nombres entiers et retourne leur diff√©rence.
.. step:: 
    Cr√©er une fonction ``multiplication(a, b)`` qui prend en param√®tre deux nombres entiers et retourne leur produit.
.. step:: 
    Cr√©er une fonction ``division(a, b)`` qui prend en param√®tre deux nombres entiers et retourne leur quotient (**Attention au type de la valeur de retour de la fonction**).
.. step:: 
    Demander √† l'utilisateur de saisir deux nombres entiers et une op√©ration arithm√©tique √† r√©aliser. Pour choisir l'op√©ration, l'utilisateur doit saisir un symbole associ√© (``+``, ``-``, ``*``, ``/``).
.. step:: 
    Utiliser les fonctions pr√©c√©demment cr√©√©es pour afficher le r√©sultat de l'op√©ration demand√©e.

.. step::
    Testez maintenant votre programme en donnant deux nombres flottants au lieu de deux nombres entiers. Que se passe-t-il ? Pourquoi ?

.. step:: 
    Changer votre programme pour qu'il puisse g√©rer les nombres flottants (n'oubliez pas de modifier les annotations de type des fonctions).

**Notes** : 
.. discoverList::
    * Ne pas oublier de g√©rer les cas d'erreur (division par z√©ro, op√©ration non reconnue, etc.).
    * Cet exercice est le m√™me que l'Exercice Sup. 2 du Chapitre 2 mais en utilisant des fonctions.

.. success::
    Vous savez maintenant √©crire des fonctions simples en Python et vous d√©couvrez comment g√©rer leur typage.

.. slide::
üìñ Les types construits
------------------------

A partir des types de base, on peut construire des types plus complexes appel√©s **types construits**. Les types construits les plus courants sont les listes, les p-uplets et les dictionnaires, ils sont g√©n√©riques et peuvent √™tre mis en oeuvre dans de nombreux langages de programmation. 

.. slide::
Les p-uplets (*tuple*)
~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un p-uplet est une **collection ordonn√©e d'√©l√©ments**. Chaque √©l√©ment peut √™tre de n'importe quel type. Les p-uplets sont **immuables**, c'est-√†-dire qu'ils ne peuvent pas √™tre modifi√©s apr√®s leur cr√©ation. Si les valeurs du p-uplet doivent √™tre chang√©es au cours de l'execution du programme alors il faut utiliser un autre type de variable comme une liste/tableau (voir partie suivante : :doc:`Les tableaux <chap3#tableaux>`).

.. slide::
**Cr√©ation d'un p-uplet**

Pour cr√©er un p-uplet, on utilise des **parenth√®ses** et on s√©pare les √©l√©ments par des **virgules**.

.. warning::
    Exemple : 
    .. code-block:: python

        # Cr√©ation d'un p-uplet
        p = (1, 2, 3, 4, 5)
        print(p)
        >> (1, 2, 3, 4, 5)

.. note::
    **Un p-uplet ne contenant qu'un seul √©l√©ment doit √™tre suivi d'une virgule**. Cela permet de diff√©rencier un p-uplet d'une expression entre parenth√®ses.
.. warning::
    Exemple : ``p = (1,)`` et non ``p = (1)``

.. slide::
**Acc√®s aux √©l√©ments d'un p-uplet**

Pour acc√©der √† un √©l√©ment d'un p-uplet, on utilise l'index de l'√©l√©ment (sa position dans le p-uplet). Pour un p-uplet de taille n, les indexs des √©l√©ments vont de 0 √† n-1.  

``p[i]`` permet d'acc√©der √† l'√©l√©ment √† l'index ``i`` du p-uplet ``p``.

.. warning::
    Exemple :
    .. code-block:: python
        
        p = (1, 2, 3, 4, 5)
        print(p[0]) # Permet d'acc√©der √† l'√©l√©ment √† l'index 0 du p-uplet p
        >> 1
        print(p[4]) # Permet d'acc√©der √† l'√©l√©ment en 5eme position (index 4) du p-uplet p
        >> 5

.. slide::
La fonction ``len()`` permet de conna√Ætre la taille d'un p-uplet. Elle permet par exemple d'acc√©der au dernier √©l√©ment d'un p-uplet.

.. warning::
    Exemple :
    .. code-block:: python

        p = (6, 7, 8, 9, 10)
        print(len(p)) # Permet de conna√Ætre la taille du p-uplet p
        >> 5
        print(p[len(p)-1]) # Permet d'acc√©der au dernier √©l√©ment du p-uplet p
        >> 10

.. _tableaux:

.. slide::
Les tableaux / Les listes (*list*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un tableau est une collection ordonn√©e d'√©l√©ments qui sont organis√©s s√©quentiellements (les uns √† la suite des autres). Contrairement aux p-uplets, les tableaux sont **mutables/muables**, c'est-√†-dire qu'ils peuvent √™tre modifi√©s apr√®s leur cr√©ation.  
    En Python, les tableaux sont appel√©s **listes**.

.. slide::
**Cr√©ation d'une liste**

Les listes sont cr√©√©es en utilisant des **crochets** et en s√©parant les √©l√©ments par des **virgules**.

.. warning::
    Exemple :
    .. code-block:: python

        # Cr√©ation d'une liste
        l = [1, 2, 3, 4, 5]
        print(l)
        >> [1, 2, 3, 4, 5]

.. slide::
**Acc√®s aux √©l√©ments d'une liste**

De la m√™me mani√®re que pour un p-uplet, pour acc√©der √† un √©l√©ment d'une liste, on utilise l'index de l'√©l√©ment. Pour une liste de taille n, les indexs des √©l√©ments vont de 0 √† n-1.  

``l[i]`` permet d'acc√©der √† l'√©l√©ment √† l'index ``i`` de la liste ``l``.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        print(l[0]) # Permet d'acc√©der √† l'√©l√©ment √† l'index 0 de la liste l
        >> 1
        print(l[4]) # Permet d'acc√©der √† l'√©l√©ment en 5eme position (index 4) de la liste l
        >> 5

.. slide::
**Modification d'une liste par affectation**

Pour modifier un √©l√©ment d'une liste, on utilise l'index de l'√©l√©ment et on lui affecte une nouvelle valeur.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        l[1] = 10 # Modifie la valeur de l'√©l√©ment √† l'index 1 de la liste l
        print(l)
        >> [1, 10, 3, 4, 5]

.. slide::
**Ajout/suppression d'√©l√©ments d'une liste**
.. discoverList::
    * Pour ajouter une valeur √† la fin une liste, on utilise la m√©thode ``append()``.
    * Pour supprimer une valeur d'une liste, on utilise la m√©thode ``remove()``.

.. warning::
    Exemple :
    .. code-block:: python

        l = [1, 2, 3, 4, 5]
        l.append(6) # Ajoute l'√©l√©ment 6 √† la fin de la liste l
        print(l)
        >> [1, 2, 3, 4, 5, 6]

        l.remove(3) # Supprime l'√©l√©ment 3 de la liste l
        print(l)
        >> [1, 2, 4, 5, 6]

        l.remove(l[0]) # Supprime le premier √©l√©ment de la liste l
        print(l)
        >> [2, 4, 5, 6]

.. slide::
Les dictionnaires (*dict*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un dictionnaire est une collection d'√©l√©ments **non ordonn√©e**. Chaque √©l√©ment est constitu√© d'une **cl√©** et d'une **valeur**. Les dictionnaires sont **mutables/muables**. Les cl√©s doivent √™tre uniques et les valeurs peuvent √™tre de n'importe quel type.

.. slide::
**Cr√©ation d'un dictionnaire**

Un nouveau dictionnaire est cr√©√© en utilisant des **accolades** et en s√©parant les √©l√©ments par des **virgules**. Chaque √©l√©ment est constitu√© d'une **cl√©** et d'une **valeur** s√©par√©es par deux points (``cl√©: valeur``).

.. warning::
    Exemple :
    .. code-block:: python
        #                     valeurs
        #      ____________________________________
        #      |                  |               |
        d = {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 30}
        #              |                   |            |
        #              ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ‚Äæ
        #                              cl√©s

.. slide::
**Acc√®s aux √©l√©ments d'un dictionnaire**

Les √©l√©ments d'un dictionnaire ne sont pas index√©s (non-ordonn√©s) comme les listes et p-uplets. Il est donc impossible d'acc√©der au n-i√®me √©l√©ment d'un dictionnaire. Pour acc√©der √† une valeur, on utilise la cl√© associ√©e √† cette valeur. C'est la raison pour laquelle les cl√©s doivent √™tre uniques.

``d[cl√©]`` permet d'acc√©der √† la valeur associ√©e √† la cl√© ``cl√©`` du dictionnaire ``d``.

.. warning::
    Exemple :
    .. code-block:: python

        d = {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 30}
        print(d["nom"]) # Acc√®s √† la valeur associ√©e √† la cl√© "nom" du dictionnaire d
        >> Dupont
        print(d[0])
        >> KeyError: 0 # Renvoie une erreur car la cl√© 0 n'existe pas dans le dictionnaire d

.. slide::
**Modification d'un dictionnaire par affectation**

Il est possible de modifier, ajouter ou supprimer des √©l√©ments d'un dictionnaire en utilisant la cl√© associ√©e √† l'√©l√©ment.

.. warning::
    Exemple :
    .. code-block:: python

        d = {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 30}
        d["√¢ge"] = 31 # Modifie la valeur associ√©e √† la cl√© "√¢ge" du dictionnaire d
        print(d)
        >> {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 31}

        d["ville"] = "Paris" # Ajoute un nouvel √©l√©ment au dictionnaire d
        print(d)
        >> {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 31, "ville": "Paris"}

        del d["pr√©nom"] # Supprime l'√©l√©ment associ√© √† la cl√© "pr√©nom" du dictionnaire d
        print(d)
        >> {"nom": "Dupont", "√¢ge": 31, "ville": "Paris"}

.. slide::
**M√©thodes sp√©cifiques aux dictionnaires**
.. discoverList::
    * La m√©thode ``keys()`` permet de r√©cup√©rer la liste des cl√©s d'un dictionnaire.
    * La m√©thode ``values()`` permet de r√©cup√©rer la liste des valeurs d'un dictionnaire.
    * La m√©thode ``items()`` permet de r√©cup√©rer la liste des couples cl√©-valeur d'un dictionnaire.

.. note::
    Le fait d'avoir ces √©l√©ments sous forme de liste permet de les manipuler plus facilement (par exemple pour les parcourir avec une boucle).

.. warning::
    Exemple :
    .. code-block:: python

        d = {"nom": "Dupont", "pr√©nom": "Jean", "√¢ge": 30}
        print(d.keys()) # R√©cup√®re la liste des cl√©s du dictionnaire d
        >> dict_keys(['nom', 'pr√©nom', '√¢ge'])

        print(d.values()) # R√©cup√®re la liste des valeurs du dictionnaire d
        >> dict_values(['Dupont', 'Jean', 30])

        print(d.items()) # R√©cup√®re la liste des couples cl√©-valeur du dictionnaire d
        >> dict_items([('nom', 'Dupont'), ('pr√©nom', 'Jean'), ('√¢ge', 30)])

.. slide::
‚úèÔ∏è Exercice 8 : Manipulation de p-uplets color√©s
------------------------------------------------

.. step:: reset

    Cr√©ez un p-uplet nomm√© ``couleurs`` qui contient les √©l√©ments suivants : "rouge", "vert", "bleu", "jaune", et "noir".
    Affichez la premi√®re et la derni√®re couleur du p-uplet.

.. step::

    Utilisez la fonction ``len()`` pour afficher la taille du p-uplet ``couleurs``.
    Affichez la couleur situ√©e √† la troisi√®me position dans le p-uplet.

.. step::

    Cr√©ez un p-uplet contenant uniquement la couleur "blanc". Assurez-vous qu‚Äôil est bien reconnu comme un p-uplet.

.. step::

    Cr√©ez un deuxi√®me p-uplet nomm√© ``nouvelles_couleurs`` avec les √©l√©ments "rose" et "violet".
    Cr√©ez un troisi√®me p-uplet, ``toutes_couleurs``, qui combine ``couleurs`` et ``nouvelles_couleurs``.
    Affichez le p-uplet ``toutes_couleurs``.

.. success::
    Vous savez maintenant manipuler des p-uplets en Python.

.. slide::
    Tr√®s bien, voici un exercice plus ouvert et ludique qui laisse un peu de place √† la cr√©ativit√© :

---

‚úèÔ∏è Exercice 9: "Cr√©er mon sandwich parfait"
--------------------------------------------

**Consigne** : Vous allez cr√©er un programme qui aide √† cr√©er un sandwich personnalis√© en fonction de diff√©rents ingr√©dients.

.. step:: reset
    **Liste des ingr√©dients disponibles**  
    Cr√©ez une liste nomm√©e ``ingredients_disponibles`` avec les √©l√©ments suivants : ``"pain"``, ``"jambon"``, ``"fromage"``, ``"salade"``, ``"tomate"``, ``"mayo"``, ``"poulet"``, ``"thon"``, ``"oeuf"``, ``"cornichon"``.

.. step::
    **Cr√©ation d'une liste de sandwich**  
    Cr√©ez une liste vide appel√©e ``mon_sandwich``.

.. step::
    **Choix des ingr√©dients**  
    Utilisez une boucle pour afficher chaque ingr√©dient de ``ingredients_disponibles`` avec une option de choix, par exemple :

      .. code-block:: python
          Voulez-vous ajouter pain √† votre sandwich ? (oui/non)

    Si la r√©ponse est ``"oui"``, ajoutez cet ingr√©dient √† ``mon_sandwich``.

.. step::
    **Affichage du sandwich final**  
    Affichez un message avec la liste des ingr√©dients choisis dans ``mon_sandwich``, par exemple :

      .. code-block:: python
          Votre sandwich contient : pain, jambon, tomate.

.. step::
    **Option d'ajout d'un ingr√©dient sp√©cial**  
    Proposez √† l'utilisateur d‚Äôajouter un ingr√©dient sp√©cial de son choix qui n‚Äôest pas dans la liste initiale. Ajoutez cet ingr√©dient, le cas √©ch√©ant.

.. step::
    **Affichage final**  
    Affichez √† nouveau la liste compl√®te des ingr√©dients de ``mon_sandwich`` apr√®s l‚Äôajout de l‚Äôingr√©dient sp√©cial (si l'utilisateur a accept√©).

.. success::
    Vous savez maintenant manipuler des listes en Python.

.. slide::
‚úèÔ∏è Exercice 10 : Cours de Potion avanc√©
----------------------------------------------
**Consigne**: Dans cet exercice, vous allez cr√©er une application qui permet √† un apprenti sorcier de pr√©parer des potions magiques en combinant divers ingr√©dients. Chaque ingr√©dient a des propri√©t√©s sp√©cifiques, et certaines combinaisons peuvent produire des effets magiques suppl√©mentaires.

.. slide::
.. step:: reset
    **Partie 1** : D√©finir les Ingr√©dients

    D√©finissez une liste de dictionnaires pour les ingr√©dients, o√π chaque ingr√©dient a :
    .. discoverList::
        * Un nom,
        * Une quantit√© de base,
        * Unit√© (grammes ou millilitres),
        * Une propri√©t√© magique
    
    Les ingr√©dients existent avec une quantit√© de base (dose unitaire) tels que :
    .. discoverList::
        * Poudre de Lune, 10g, gu√©rison
        * √âcailles de Dragon, 5g, force
        * Larmes de Licorne, 2mL, invisibilit√©
        * Herbes Mystiques, 8g, s√©r√©nit√©
        * (Vous pouvez ajouter un autre ingr√©dient √† cette liste si vous le souhaitez)

.. slide::
.. step::
    **Partie 2** : Calculer les quantit√©s  

    D√©finissez une fonction ``calculer_quantite`` qui prend deux arguments :

    .. discoverList::
        * ``ingredient`` (type ``str``): le nom de l'ingr√©dient,
        * ``quantite`` (type ``int``): la quantit√© de cet ingr√©dient √† utiliser.
    
    Et retourne un p-uplet contenant : 
    .. discoverList::
        * La quantit√© totale de l'ingr√©dient (type ``int``),
        * L'unit√© de cette quantit√© (type ``str``),
        * L'effet de l'ingr√©dient (type ``str``).

    Cette fonction doit :

    .. discoverList::
        1. Rechercher l'ingr√©dient dans la liste des ingr√©dients.
        2. Multiplier la quantit√© de base de l'ingr√©dient par le nombre de doses souhait√©es.
        3. Retourner la quantit√© totale, l'unit√© et l'effet de l'ingr√©dient.

**Aide pour le typage de la fonction** :
.. code-block:: python
    def calculer_quantite(ingredient: str, quantite: int) -> tuple[int, str, str]:
    # Code de la fonction


.. slide::
.. step::
    **Partie 3** : Cr√©er la Potion  

    D√©finissez une fonction ``creer_potion`` qui prend deux listes comme param√®tres :
    
    .. discoverList::
        * ``ingredient_choisis`` : une liste de noms d'ingr√©dients choisis.
        * ``quantites`` : une liste des quantit√©s pour chaque ingr√©dient.

    Et retourne un p-uplet contenant : 
    .. discoverList::
        * La quantit√© totale de la potion en gramme (type ``int``),
        * La quantit√© totale de la potion en millilitre (type ``int``),
        * Tous les effets de la potion (type ``str``).

    Cette fonction doit :

    .. discoverList::
        1. Appeler ``calculer_quantite`` pour chaque ingr√©dient s√©lectionn√©.
        2. Additionner les quantit√©s en grammes et en millilitres s√©par√©ment.
        3. Rassembler tous les effets des ingr√©dients choisis.
        4. Retourner la quantit√© totale en gramme et millilitre ainsi que les effets de la potion.

.. slide::
.. step::
    **Partie 4** : Programme principal
    .. discoverList::
        * Affichez un message de bienvenue pour plonger l'utilisateur dans l'ambiance du laboratoire de potions magiques.
        * Affichez les ingr√©dients avec leur quantit√© de base et leurs effets pour que l‚Äôutilisateur sache quoi choisir.
        * Demandez √† l‚Äôutilisateur de choisir des ingr√©dients et de sp√©cifier la quantit√© en doses pour chaque ingr√©dient. L‚Äôutilisateur doit taper "fin" pour terminer la s√©lection des ingr√©dients.
        * Une fois les choix termin√©s, appelez la fonction ``creer_potion``, qui retournera les quantit√©s totales en grammes et millilitres ainsi qu'une liste des effets des ingr√©dients.
        * Enfin, utilisez les valeurs retourn√©es par ``creer_potion`` pour afficher la quantit√© totale et les effets de la potion.

.. slide::
**Resulat attendu** :
.. code-block::
    >> Bienvenue dans le laboratoire de potions magiques !
    >> Vous allez pouvoir cr√©er une potion en combinant diff√©rents ingr√©dients.
    >> 
    >> Ingr√©dients disponibles :
    >> 1. Poudre de Lune, 10grammes, gu√©rison
    >> 2. √âcailles de Dragon, 5grammes, force
    >> 3. Larmes de Licorne, 2millilitres, invisibilit√©
    >> 4. Herbes Mystiques, 8grammes, s√©r√©nit√©
    >> Choisissez un ingr√©dient (1-4) ou tapez 'fin' pour terminer : 1
    >> Entrez la quantit√© (en doses) : 5
    >> Choisissez un ingr√©dient (1-4) ou tapez 'fin' pour terminer : 3
    >> Entrez la quantit√© (en doses) : 2
    >> Choisissez un ingr√©dient (1-4) ou tapez 'fin' pour terminer : 4
    >> Entrez la quantit√© (en doses) : 1
    >> Choisissez un ingr√©dient (1-4) ou tapez 'fin' pour terminer : fin
    >> 
    >> Potion cr√©√©e :
    >> Quantit√© totale : 58g, 4mL
    >> Effets : gu√©rison, invisibilit√©, s√©r√©nit√©

.. success::
    Vous savez maintenant manipuler les types construits ainsi que les fonctions en Python d'un niveau interm√©diaire.

.. slide::
‚úÖ R√©capitulatif de Chapitre
-------------------------

.. |puplet_notation| div::
    .. center::
    ``(1, 8, 5)``

.. |tableau_notation| div::
    .. center::
    ``[1, 8, 5]``

.. |dictionnaire_notation| div::
    .. center::
    ``{1: 'Paul', 2: 'Tom', 3: 'Nadia'}``

---

.. |puplet_construction| div::
    .. center::
    P-uplet vide: ``t = ()``
    
    ``t1 = (1, 8, 5)``

.. |tableau_construction| div::
    .. center::
    Liste vide: ``L = []``
    
    ``L1 = [1, 8, 5]``

.. |dictionnaire_construction| div::
    .. center::
    Dictionnaire vide: ``D = {}``
    
    ``d1 = {1: 'Paul', 2: 'Tom', 3: 'Nadia'}``

---

.. |puplet_elements| div::
    .. center::
    **Oui**
    
    ``t2 = (1, 'b', True)``

.. |tableau_elements| div::
    .. center::
    **Oui**
    
    ``L2 = [1, 'b', True]``

.. |dictionnaire_elements| div::
    .. center::
    Les cl√©s peuvent √™tre de tout type, √† condition d‚Äô√™tre non modifiables: *int, str, tuple*
    
    ``d2 = {4: 'L√©a', 5: 'T√©o'}``

---

.. |puplet_lecture| div::
    .. center::
    ``t1[0]`` renvoie ``1``
    
    ``t1[-1]`` renvoie le dernier √©l√©ment de ``t1``, soit ``5``
    
    ``t2[2]`` renvoie ``True``

.. |tableau_lecture| div::
    .. center::
    ``L1[0]`` renvoie ``1``
    
    ``L1[-1]`` renvoie le dernier √©l√©ment de ``L1``, soit ``5``
    
    ``L2[2]`` renvoie ``True``

.. |dictionnaire_lecture| div::
    .. center::
    ``d1[0]`` renvoie une erreur (cl√© inexistante)
    
    ``d1[1]`` renvoie ``'Paul'``

---

.. |puplet_concatenation| div::
    .. center::
    ``t1 + t2`` renvoie
    
    ``(1, 8, 5, 1, 'b', True)``

.. |tableau_concatenation| div::
    .. center::
    ``L1 + L2`` renvoie 
    
    ``[1, 8, 5, 1, 'b', True]``

.. |dictionnaire_concatenation| div::
    .. center::
    **Non**
    
    ``d1 + d2`` renvoie une erreur de type

---

.. |puplet_multiplication| div::
    .. center::
    ``2 * t1`` renvoie ``(1, 8, 5, 1, 8, 5)``

.. |tableau_multiplication| div::
    .. center::
    ``2 * L1`` renvoie ``[1, 8, 5, 1, 8, 5]``

.. |dictionnaire_multiplication| div::
    .. center::
       
    **Non**

    ``2 * d1`` renvoie une erreur

---

.. |puplet_modifiable| div::
    .. center::
    **Non**
    
    On peut cr√©er un nouveau p-uplet

.. |tableau_modifiable| div::
    .. center::
    **Oui**
    
    Avec l'instruction ``L1[2] = 4``, ``L1`` devient ``[1, 8, 4]``

.. |dictionnaire_modifiable| div::
    .. center::
    On peut modifier les valeurs, mais pas les cl√©s
    
    Exemple: ``d1[2] = 'Joe'`` remplace ``'Tom'`` par ``'Joe'``

---

.. |puplet_longueur| div::
    .. center::
    ``len(t1)`` renvoie ``3``

.. |tableau_longueur| div::
    .. center::
    ``len(L1)`` renvoie ``3``

.. |dictionnaire_longueur| div::
    .. center::
    ``len(d1)`` renvoie ``3``

---

.. |puplet_methodes| div::
    .. center::
    Pas de m√©thode sp√©cifique √† conna√Ætre

.. |tableau_methodes| div::
    .. center::
    ``L1.append(element)`` ajoute ``element`` √† la fin de ``L1``

.. |dictionnaire_methodes| div::
    .. center::
    ``d1.items()`` renvoie la collection d‚Äôobjets
    
    ``d1.keys()`` renvoie les cl√©s
    
    ``d1.values()`` renvoie les valeurs

.. center::
    +------------------------+------------------------+--------------------------+--------------------------------------+
    |                        | **P-uplet**            | **Tableau (liste)**      | **Dictionnaire**                     |
    +========================+========================+==========================+======================================+
    | **Notation**           | |puplet_notation|      | |tableau_notation|       | |dictionnaire_notation|              |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Construction**       | |puplet_construction|  | |tableau_construction|   | |dictionnaire_construction|          |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Les √©lements**       | |puplet_elements|      | |tableau_elements|       | |dictionnaire_elements|              |
    | **internes peuvent**   |                        |                          |                                      |
    | **√™tre de diff√©rents** |                        |                          |                                      |
    | **types**              |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Lecture du contenu** | |puplet_lecture|       | |tableau_lecture|        | |dictionnaire_lecture|               |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Concat√©nation**      | |puplet_concatenation| | |tableau_concatenation|  | |dictionnaire_concatenation|         |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Multiplication**     | |puplet_multiplication|| |tableau_multiplication| | |dictionnaire_multiplication|        |
    | **par un entier**      |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Modifiable par**     | |puplet_modifiable|    | |tableau_modifiable|     | |dictionnaire_modifiable|            |
    | **affectation**        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **Longueur**           | |puplet_longueur|      | |tableau_longueur|       | |dictionnaire_longueur|              |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+
    | **M√©thodes**           | |puplet_methodes|      | |tableau_methodes|       | |dictionnaire_methodes|              |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    |                        |                        |                          |                                      |
    +------------------------+------------------------+--------------------------+--------------------------------------+

üèãÔ∏è Exercices suppl√©mentaires
--------------------

.. toctree::

    exos_sup_chap3