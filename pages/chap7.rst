.. slide::

Chapitre 7 - Introduction √† la Programmation Orient√©e Objet (POO)
=====================================

üéØ Objectifs du Chapitre
---------------------

.. important:: 
    - D√©couvrir la programmation orient√©e objet (POO) de mani√®re progressive et intuitive.
    - Comprendre les concepts fondamentaux comme les classes, les objets, les attributs et les m√©thodes.
    - Apprendre √† cr√©er et manipuler des objets en Python.


.. slide::

üìñ 1. Qu‚Äôest-ce que la Programmation Orient√©e Objet ?
---------------------------------------------------

1.1 D√©finition
~~~~~~~~~~~~~~

La Programmation Orient√©e Objet (POO) est une mani√®re de structurer un programme en organisant les donn√©es et les comportements en **objets**. Ces objets sont comme des "entit√©s" qui regroupent :

- **Des donn√©es** (appel√©es **attributs**) : Ce que l'objet "poss√®de".
- **Des comportements** (appel√©s **m√©thodes**) : Ce que l'objet "fait".

.. slide::
1.2 Une analogie simple
~~~~~~~~~~~~~~~~~~~~~~~

Imaginons que vous construisez un jeu qui simule un zoo. Dans ce zoo :

- Les animaux sont des **objets**.
- Chaque animal a des caract√©ristiques (**attributs**) comme un nom, une esp√®ce et un √¢ge.
- Chaque animal peut effectuer des actions (**m√©thodes**) comme manger, dormir ou √©mettre un son.

En POO, vous cr√©ez des "mod√®les" pour repr√©senter ces animaux. Ces mod√®les sont appel√©s des **classes**.

.. slide::
1.3 Pourquoi utiliser la POO ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- **Mod√©liser des concepts r√©els** : Facilite la repr√©sentation d'entit√©s du monde r√©el (ex. : voiture, utilisateur).
- **R√©utilisation du code** : Les classes peuvent √™tre utilis√©es dans plusieurs parties d'un programme.
- **Modularit√©** : Le code est plus organis√© et facile √† comprendre.
- **√âvolutivit√©** : Plus simple √† maintenir et √† √©tendre.

.. slide::
üìñ 2. Les concepts de base de la POO
---------------------------------

2.1 Classes et objets
~~~~~~~~~~~~~~~~~~~~~
.. note::
Une **classe** est un **mod√®le** ou un **plan** pour cr√©er des objets. Par exemple, la classe "Animal" d√©finit ce que chaque animal poss√©dera comme attributs et m√©thodes.

.. note::
Un **objet** est une **instance** de cette classe. Par exemple, "L√©o le lion" est un objet de la classe "Animal".

.. slide::
2.2 Attributs et m√©thodes
~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
Les **attributs** sont des **variables** qui stockent les **donn√©es** sp√©cifiques √† chaque objet.
.. warning::
Ex. : Le nom, l‚Äô√¢ge ou la couleur d‚Äôun animal.
.. note::
Les **m√©thodes** sont des **fonctions** d√©finies dans une classe, qui d√©crivent les **actions** possibles pour un objet.
.. warning::
Ex. : Manger, dormir ou rugir pour un animal.

.. slide::
üìñ 3. Premi√®re classe et premier objet
-----------------------------------

3.1 D√©finir une classe
~~~~~~~~~~~~~~~~~~~~~~
En Python, une classe est d√©finie avec le mot-cl√© ``class``. Voici un exemple simple :
.. warning::
    Exemple de classe vide :
    .. code-block:: python

        # D√©finir une classe "Animal"
        class Animal:
            pass  # Pour l'instant, la classe est vide

.. slide::
3.2 Cr√©er un objet
~~~~~~~~~~~~~~~~~~
Une fois la classe d√©finie, vous pouvez cr√©er un **objet** (ou **instance**) de cette classe en l‚Äôappelant comme une fonction.

.. warning::
    Exemple :
    .. code-block:: python

        # Cr√©er un objet de la classe Animal
        mon_animal = Animal()
        print(mon_animal)
        
        >> <__main__.Animal object at 0x...>

.. slide::
3.3 Ajouter des attributs
~~~~~~~~~~~~~~~~~~~~~~~~~
Pour ajouter des **attributs** √† un objet, on peut les affecter directement apr√®s la cr√©ation de l'objet.
.. warning::
    Exemple :
    .. code-block:: python

        # Ajouter des attributs √† l'objet
        mon_animal.nom = "L√©o"
        mon_animal.age = 5

        # Afficher les attributs
        print(f"Nom : {mon_animal.nom}, √Çge : {mon_animal.age}")
        >> Nom : L√©o, √Çge : 5

.. slide::
3.4 Ajouter un constructeur pour initialiser les attributs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Au lieu d‚Äôajouter les attributs un par un, vous pouvez utiliser une m√©thode sp√©ciale appel√©e **constructeur** pour les d√©finir automatiquement √† la cr√©ation de l‚Äôobjet. En Python, cette m√©thode est ``__init__``.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom, age):
                self.nom = nom  # Attribut nom
                self.age = age  # Attribut √¢ge

        # Cr√©er un objet avec des attributs directement
        mon_animal = Animal("L√©o", 5)
        print(f"Nom : {mon_animal.nom}, √Çge : {mon_animal.age}")
        >> Nom : L√©o, √Çge : 5

.. slide::
3.5 Ajouter des m√©thodes
~~~~~~~~~~~~~~~~~~~~~~~~
Les **m√©thodes** sont des fonctions d√©finies dans une classe qui d√©crivent les **actions d'un objet**. Elles utilisent toujours ``self`` comme premier param√®tre pour acc√©der aux attributs de l'objet.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom, age):
                self.nom = nom
                self.age = age

            def parler(self):
                print(f"{self.nom} fait un bruit.")

        # Cr√©er un objet et appeler une m√©thode
        mon_animal = Animal("L√©o", 5)
        mon_animal.parler()
        >> L√©o fait un bruit.

.. slide::
.. warning::
    Exemple complet :
    .. code-block:: python
        class Animal:
            def __init__(self, nom, espece, age):
                self.nom = nom
                self.espece = espece
                self.age = age

            def manger(self):
                print(f"{self.nom} est en train de manger.")

            def se_presenter(self):
                print(f"Je suis {self.nom}, un {self.espece} de {self.age} ans.")

        # Cr√©er des objets
        animal1 = Animal("L√©o", "lion", 5)
        animal2 = Animal("Mimi", "chat", 2)

        # Utiliser les objets
        animal1.se_presenter() 
        animal2.manger()

        >> Je suis L√©o, un lion de 5 ans.
        >> Mimi est en train de manger.

.. slide::
üìñ 4. Les propri√©t√©s d'instance et l‚Äôattribut ``self``
-------------------------------------------------

4.1 Qu‚Äôest-ce que ``self`` ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dans une m√©thode d‚Äôune classe, le mot-cl√© ``self`` est une r√©f√©rence √† l'objet actuel. Il permet d'acc√©der aux attributs et m√©thodes de l'objet √† l'int√©rieur de la classe. 

.. note::
    - ``self`` doit √™tre le **premier param√®tre** de toutes les m√©thodes d'instance.  
    - Lorsque vous appelez une m√©thode sur un objet, Python passe automatiquement cet objet en tant qu'argument pour ``self``.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom):
                self.nom = nom  # Attribut d'instance

            def parler(self):
                print(f"{self.nom} fait un bruit.")

        # Cr√©er un objet
        chat = Animal("Mimi")
        chat.parler()

        >> Mimi fait un bruit.
        # Ici, "chat" est pass√© automatiquement √† la m√©thode comme self.

.. slide::
4.2 Diff√©rence entre attributs d'instance et attributs locaux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Un **attribut d‚Äôinstance** est li√© √† l‚Äôobjet (avec ``self.nom``). Il est accessible dans toutes les m√©thodes de l'objet.

Un **attribut local** est une variable d√©finie √† l‚Äôint√©rieur d‚Äôune m√©thode, et elle n‚Äôest pas accessible en dehors.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom):
                self.nom = nom  # Attribut d'instance

            def description(self):
                attribut_local = "temporaire"  # Attribut local
                print(f"{self.nom} a un attribut local : {attribut_local}")

        chien = Animal("Rex")
        chien.description()
        >> Sortie : Rex a un attribut local : temporaire

        print(attribut_local)  
        # Erreur : attribut_local n'existe pas en dehors de la m√©thode.

.. slide::
üìñ 5. M√©thodes sp√©ciales : ``__str__`` pour personnaliser l'affichage
---------------------------------------------------------------

5.1 La m√©thode ``__str__``
~~~~~~~~~~~~~~~~~~~~~~~~~
La m√©thode sp√©ciale ``__str__`` permet de d√©finir ce qui sera affich√© lorsque vous utilisez ``print()`` sur un objet.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom, espece):
                self.nom = nom
                self.espece = espece

            def __str__(self):
                return f"{self.nom} est un {self.espece}."

        # Cr√©er un objet
        chien = Animal("Rex", "chien")
        print(chien)
        >> Sortie : Rex est un chien.

5.2 Avantages de ``__str__``
~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Rendre les objets plus lisibles et compr√©hensibles.
- Faciliter le d√©bogage et l‚Äôaffichage des informations.


.. slide::
üìñ 6. Variables et m√©thodes de classe
---------------------------------------------

6.1 Variables de classe
~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Une **variable de classe** est une variable partag√©e par toutes les instances d‚Äôune classe. Contrairement aux **attributs d‚Äôinstance**, qui sont propres √† chaque objet, une variable de classe est unique pour la classe enti√®re.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            population = 0  # Variable de classe

            def __init__(self, nom):
                self.nom = nom  # Attribut d'instance
                Animal.population += 1  # Incr√©mente la population

        # Cr√©er des instances
        animal1 = Animal("L√©o")
        animal2 = Animal("Mimi")

        print(f"Population totale : {Animal.population}")
        # Sortie : Population totale : 2

        # La variable de classe est partag√©e par toutes les instances
        print(animal1.population)
        print(animal2.population)

        >> 2
        >> 2

.. slide::
6.2 M√©thodes de classe
~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Une **m√©thode de classe** agit sur la classe elle-m√™me, pas sur une instance particuli√®re. Pour d√©finir une m√©thode de classe, on utilise le d√©corateur ``@classmethod`` et un param√®tre ``cls`` (r√©f√©rence √† la classe).

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            population = 0  # Variable de classe

            def __init__(self, nom):
                self.nom = nom
                Animal.population += 1

            @classmethod
            def afficher_population(cls):
                print(f"Population totale : {cls.population}")

        # Appeler la m√©thode de classe
        Animal.afficher_population()
        lion = Animal("L√©o")
        Animal.afficher_population()

        >> Population totale : 0
        >> Population totale : 1

.. slide::
üìñ 7. H√©ritage
--------------

7.1 Qu‚Äôest-ce que l‚Äôh√©ritage ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    L‚Äô**h√©ritage** permet de cr√©er une nouvelle classe (appel√©e **classe enfant**) √† partir d‚Äôune classe existante (appel√©e **classe parent**). La classe enfant h√©rite des attributs et m√©thodes de la classe parent, mais peut aussi ajouter ou modifier des fonctionnalit√©s.

.. slide::
7.2 Exemple simple d‚Äôh√©ritage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Imaginons une classe parent ``Animal`` et une classe enfant ``Chien``.

.. warning::
    Exemple :
    .. code-block:: python

        class Animal:
            def __init__(self, nom):
                self.nom = nom

            def parler(self):
                print(f"{self.nom} fait un bruit.")

        # Classe enfant
        class Chien(Animal):
            def parler(self):
                print(f"{self.nom} aboie.")

        # Cr√©er des objets
        animal = Animal("L√©o")
        chien = Chien("Rex")

        animal.parler()  
        chien.parler()

        >> L√©o fait un bruit.
        >> Rex aboie.

.. slide::
‚úèÔ∏è Exercice 17 : Classe Personne
------------------------------------------

.. step:: reset
    D√©finissez une classe ``Personne`` avec les attributs ``nom`` et ``age``.
.. step::
    Ajoutez une m√©thode ``se_presenter`` qui affiche : "Je m'appelle [nom] et j'ai [age] ans."
.. step::
    Cr√©ez deux objets ``Personne`` et appelez leur m√©thode ``se_presenter``.
.. step::
    Ajoutez une m√©thode ``est_majeur`` qui retourne ``True`` si l‚Äô√¢ge est sup√©rieur ou √©gal √† 18, sinon ``False``.
.. step::
    Cr√©ez un objet et affichez un message indiquant si la personne est majeure.

.. slide::
‚úèÔ∏è Exercice 18 : Classe Voiture
-------------------------------

.. step:: reset
    D√©finissez une classe ``Voiture`` avec les attributs ``marque``, ``modele`` et ``annee``.
.. step::
    Ajoutez une m√©thode ``decrire`` qui affiche les informations sur la voiture.
.. step::
    Cr√©ez un objet ``Voiture`` et utilisez la m√©thode ``decrire``.
.. step::
    Ajoutez un attribut ``distance`` √† la classe ``Voiture`` pour stocker la distance parcourue.
.. step::
    Ajoutez une m√©thode ``avancer`` qui augmente la distance.
.. step::
    Affichez la distance totale parcourue apr√®s plusieurs appels √† ``avancer``.

.. slide::
‚úèÔ∏è Exercice 19 : Gestion d‚Äôune biblioth√®que
---------------------------------------------

.. step:: reset
    Cr√©ez une classe ``Livre`` avec les attributs ``titre``, ``auteur`` et ``disponible`` (bool√©en).
.. step::
    Ajoutez les m√©thodes :

        - ``emprunter`` : marque le livre comme emprunt√© si disponible.
        - ``retourner`` : marque le livre comme disponible.
.. step::
    Testez en cr√©ant plusieurs livres et en appelant ces m√©thodes.

.. slide::
‚úèÔ∏è Exercice 20 : Classe Compte Bancaire
----------------------------------------

.. step:: reset
    Cr√©ez une classe ``CompteBancaire`` avec :

        - Un attribut ``titulaire`` pour le nom du titulaire.
        - Un attribut ``solde`` initialis√© √† 0.
.. step::
    Ajoutez les m√©thodes :

        - ``deposer`` pour ajouter de l'argent au solde.
        - ``retirer`` pour retirer de l'argent si le solde est suffisant.
        - ``afficher_solde`` pour afficher le solde actuel.
.. step::
    Testez la classe avec plusieurs op√©rations.

.. slide::
‚úèÔ∏è Exercice 21 : Classe Employe avec variable de classe
----------------------------------------

.. step:: reset
    Cr√©ez une classe ``Employe`` avec les attributs ``nom`` et ``salaire``.
.. step::
    Ajoutez une **variable de classe** ``nombre_employes``, initialis√©e √† 0.
.. step::
    Dans le constructeur, augmentez la variable ``nombre_employes`` de 1 √† chaque cr√©ation d‚Äôun employ√©.
.. step::
    Ajoutez une m√©thode ``afficher_nombre_employes`` (m√©thode de classe) qui affiche le nombre total d‚Äôemploy√©s.
.. step::
    Cr√©ez plusieurs employ√©s et utilisez la m√©thode pour afficher le nombre total d‚Äôemploy√©s cr√©√©s.

.. slide::
‚úèÔ∏è Exercice 22 : Usine de jouets
--------------------------------

.. step:: reset
    Cr√©ez une classe ``Jouet`` avec :

        - Un attribut ``nom`` (le nom du jouet).
        - Une m√©thode ``description()`` qui affiche : ``"Ceci est un jouet nomm√© [nom]"``.
.. step:: 
    Cr√©ez deux classes enfants ``Peluche`` et ``Voiture`` qui h√©ritent de ``Jouet`` :

        - **Classe ``Peluche``** :
            - Ajoutez un attribut ``matiere`` (par exemple : ``"coton"``).
            - Ajoutez une m√©thode ``serrer()`` qui affiche : ``"Vous serrez [nom] en peluche, en [matiere], c'est si doux !"``.

        - **Classe ``Voiture``** :
            - Ajoutez un attribut ``vitesse_max`` (en km/h).
            - Ajoutez une m√©thode ``conduire()`` qui affiche : ``"Vous conduisez [nom], elle peut aller jusqu'√† [vitesse_max] km/h !"``.
.. step:: 
    Testez votre code :

        - Cr√©ez un objet de chaque classe enfant.
        - Appelez les m√©thodes ``description()``, ``serrer()`` et ``conduire()``.

Exemple de sortie attendue :

.. code-block:: text

    >> Ceci est un jouet nomm√© Ours
    >> Vous serrez Ours en peluche, en coton, c'est si doux !
    >> Ceci est un jouet nomm√© Ferrari
    >> Vous conduisez Ferrari, elle peut aller jusqu'√† 300 km/h !


.. slide::

‚úÖ R√©capitulatif de Chapitre
-------------------------

- **POO** : Une m√©thode pour structurer le code en organisant les donn√©es et comportements en objets.
- **Classe** : Mod√®le ou plan permettant de cr√©er des objets partageant des attributs et des m√©thodes communs.
- **Objet** : Instance d'une classe, repr√©sentant une entit√© sp√©cifique avec ses propres donn√©es et comportements.

**Attributs et m√©thodes** :

    - **Attributs** : Variables li√©es √† un objet pour stocker ses donn√©es.
    - **M√©thodes** : Fonctions d√©finies dans une classe d√©crivant les actions possibles d'un objet.

**Constructeur (``__init__``)** :

    - Permet d'initialiser automatiquement les attributs d'un objet lors de sa cr√©ation.

**Self** :

    - R√©f√©rence √† l'objet actuel, n√©cessaire pour acc√©der √† ses attributs et m√©thodes √† l'int√©rieur de la classe.

**M√©thodes sp√©ciales** :

    - Exemple : ``__str__`` pour personnaliser l'affichage d'un objet.

**H√©ritage** :

    - Cr√©ation de classes enfants √† partir de classes parents pour r√©utiliser ou sp√©cialiser le comportement.
    - Exemple : Une classe ``Chien`` h√©ritant d'une classe ``Animal``.

**Variables et m√©thodes de classe** :

    - **Variables de classe** : Partag√©es entre toutes les instances d'une classe.
    - **M√©thodes de classe** : Utilisent le d√©corateur ``@classmethod`` et agissent sur la classe enti√®re.

**Pourquoi utiliser la POO ?**

- Facilite la **mod√©lisation du monde r√©el**.
- Encourage la **r√©utilisation du code** via les classes et l‚Äôh√©ritage.
- Favorise la **modularit√©** et rend le code plus **facile √† maintenir**.


.. slide::
üèãÔ∏è Exercices suppl√©mentaires
----------------------------

Refaites les exercices suppl√©mentaires des chapitres pr√©c√©dents en utilisant la Programmation Orient√©e Objet.