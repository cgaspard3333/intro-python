üèãÔ∏è Exercices suppl√©mentaires
=========================
.. slide::
Sur cette page se trouvent des exercices suppl√©mentaires pour vous entra√Æner. Ils sont class√©s par niveau de difficult√© :
.. discoverList::
    * Facile : üçÄ
    * Moyen : ‚öñÔ∏è
    * Difficile : üå∂Ô∏è

üçÄ Exercice 19 : √âvaluation des notes d‚Äôune classe
--------------------------------------------------

Remplissez un fichier texte (``notes.txt``) avec les notes obtenues par des √©tudiants dans diff√©rentes Unit√©s d'Enseignement (UE). Chaque ligne du fichier repr√©sente les notes d‚Äôun √©tudiant et chaque colonne les notes des diff√©rentes UE qu‚Äôil a suivies, s√©par√©es par des espaces.

**Consignes** :

.. step:: reset
    **Calculer les statistiques individuelles pour chaque √©tudiant :**

    - La moyenne g√©n√©rale des notes.
    - La note minimale n√©cessaire au prochain examen pour que l'√©tudiant atteigne une moyenne de 10/20.
    - Le nombre d'UE valid√©es (une UE est valid√©e si la note obtenue est sup√©rieure ou √©gale √† 10/20).

.. step::
    **Calculer les statistiques globales de la classe :**

    - La moyenne g√©n√©rale de la classe.
    - L'√©cart type des moyennes des √©tudiants.

.. step::
    **Afficher les r√©sultats de mani√®re structur√©e, en pr√©cisant :**

    - Les statistiques pour chaque √©tudiant :
        - Moyenne g√©n√©rale.
        - Note n√©cessaire au prochain examen.
        - Nombre d'UE valid√©es.
    - Les statistiques globales de la classe :
        - Moyenne g√©n√©rale.
        - √âcart type des moyennes.

**Astuces** :
.. spoiler::
    Exemple d'un fichier ``notes.txt`` :
    .. code-block:: text
        12 8 14 10 11
        9 11 10 12 13
        8 7 6 10 11
        10 11 12 13 14
        12 13 14 15 16

**Exemple de r√©sultat attendu** :
.. spoiler::
    
    .. code-block:: text
        >> Statistiques par √©tudiant :
        >> √âtudiant 1 : Moyenne = 11.0, Note n√©cessaire = N√©ant (moyenne d√©j√† atteinte), UE valid√©es = 4
        >> √âtudiant 2 : Moyenne = 11.0, Note n√©cessaire = N√©ant (moyenne d√©j√† atteinte), UE valid√©es = 4
        >> √âtudiant 3 : Moyenne = 8.4, Note n√©cessaire = 18.0, UE valid√©es = 2

        >> Statistiques de la classe :
        >> Moyenne g√©n√©rale de la classe : 10.13
        >> √âcart type des moyennes : 1.23

‚öñÔ∏è Exercice 20 : Jeu du pendu am√©lior√©
-------------------------------------

Dans cet exercice, vous allez d√©velopper une version avanc√©e du jeu du pendu. Le programme sera divis√© en plusieurs modules pour garantir une structure claire et organis√©e.

**Objectifs** :

1. Deviner un mot parmi une liste stock√©e dans un fichier.
2. G√©rer les scores des joueurs en fonction des tentatives restantes.
3. Ajouter des niveaux de difficult√© :
   - *Facile* : Plus de tentatives, mots courts.
   - *Difficile* : Moins de tentatives, mots longs.
4. Enrichir l'exp√©rience avec des illustrations ASCII du pendu pour chaque tentative incorrecte.

**Consignes** :

.. step:: reset
    **Fichier principal (``main.py``)** :

    - Coordonne les diff√©rents modules du programme.
    - Affiche un menu principal permettant :
        - De choisir un niveau de difficult√©.
        - De lancer une nouvelle partie.
        - D'afficher les scores des joueurs.
    - Demande le nom du joueur au d√©but.
    - Affiche le score final une fois la partie termin√©e.

.. step::
    **Fichier de gestion des donn√©es (``data.py``)** :

    Ce fichier contient les fonctions pour :

    - **Charger les mots** : Lire une liste de mots depuis un fichier texte (``mots.txt``).
        - Mots courts (3 √† 5 lettres) pour le niveau facile.
        - Mots longs (6 lettres ou plus) pour le niveau difficile.
    - **Sauvegarder les scores** : Enregistrer les scores dans un fichier texte (``scores.txt``).

.. step::
    **Fichier des fonctions du jeu (``jeu.py``)** :

    Ce fichier contient les fonctions principales du jeu du pendu :

    1. S√©lectionner un mot : En fonction du niveau de difficult√©.
    2. Affichage progressif : Montrer les lettres d√©couvertes et masquer les autres par `_`.
    3. Gestion des entr√©es : Valider les lettres propos√©es par le joueur.
    4. Gestion des erreurs : Diminuer les tentatives restantes pour chaque erreur.
    5. Illustrations ASCII : Afficher une repr√©sentation graphique du pendu √† chaque √©tape.

.. step::
    **Fichier de gestion des scores (``score.py``)** :

    Ce fichier contient les fonctions pour :

    1. Ajouter un score pour un joueur apr√®s une partie.
    2. Afficher les scores class√©s par ordre d√©croissant.
    3. G√©rer les statistiques globales de la classe, par exemple :
        - Score moyen.
        - Joueur avec le meilleur score.

**R√®gles du jeu** :


- **Objectif** : Deviner un mot en proposant des lettres une par une.
- **Le joueur a un nombre limit√© de tentatives** :
    - Niveau *facile* : 10 tentatives.
    - Niveau *difficile* : 6 tentatives.
- Chaque tentative incorrecte r√©duit le nombre de coups restants.
- Si le mot est devin√© avant que toutes les tentatives soient utilis√©es, le joueur gagne des points :
    - **Score** : Nombre de coups restants √† la fin.
- Le score est sauvegard√© dans ``scores.txt``.

**Organisation des fichiers** :


1. ``main.py`` : Gestion principale et menu interactif.
2. ``data.py`` : Gestion des fichiers (*mots.txt* et *scores.txt*).
3. ``jeu.py`` : Logique du jeu (affichage, v√©rification des lettres, etc.).
4. ``score.py`` : Gestion des scores et des statistiques.

**Exemple de r√©sultat attendu** :
.. spoiler::
    .. code-block:: text
        >> === Jeu du Pendu === 
        >> 1. Nouvelle Partie
        >> 2. Afficher les Scores
        >> 3. Quitter
        >> Choix : 1 
        >> Entrez votre nom : Alice 
        >> Choisissez un niveau de difficult√© : 
        >> 1. Facile 
        >> 2. Difficile
        >> Choix : 1 
        >> Mot √† deviner : _ _ _ _ _ 
        >> Entrez une lettre : a 
        >> Mot √† deviner : a _ _ _ _ 
        >> Nombre de tentatives restantes : 9 

        # ... (Suite du jeu) 

        >> === Fin de la Partie === Alice, votre score est : 6

‚öñÔ∏è Exercice 21 : Recherche avanc√©e - Recherche par interpolation
---------------------------------------------------------------

**Objectifs** : 

√âcrire un programme Python qui permet de :

- Faire une recherche par interpolation pour trouver un √©l√©ment donn√© dans une liste tri√©e.
- Charger les donn√©es √† partir d'un fichier texte contenant une liste tri√©e de nombres.
- √âcrire le r√©sultat de la recherche dans un autre fichier texte.

**Consignes** :

.. step:: reset
    **Cr√©ation des fichiers**

    - Cr√©ez un fichier texte nomm√© ``data.txt`` contenant une liste tri√©e de nombres s√©par√©s par des virgules. Par exemple : ``1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31``

- Si le fichier ``data.txt`` n'existe pas, votre programme devra le cr√©er avec un contenu par d√©faut (par exemple, une liste tri√©e de nombres entre 1 et 100).

.. step::
    **Lecture des donn√©es**

    - √âcrivez une fonction ``charger_liste()`` qui lit les nombres depuis le fichier ``data.txt``, les convertit en une liste d'entiers et les retourne.

.. step::
    **Recherche par interpolation**

    - Impl√©mentez deux fonctions :

        - ``recherche_interpolation(liste, valeur)`` : R√©alise une recherche par interpolation.
        - ``recherche_dichotomique(liste, valeur)`` : R√©alise une recherche dichotomique.

    - Chaque fonction devra retourner :

        - L'index de l'√©l√©ment cherch√© (ou ``-1`` s'il n'existe pas).
        - Le nombre d'it√©rations n√©cessaires.

.. step::
    **Saisie utilisateur**

    - Demandez √† l'utilisateur de saisir le nombre √† rechercher.

.. step::
    **Comparaison des algorithmes**

    - Enregistrez dans un fichier ``resultat.txt`` :

        - La position du nombre trouv√© ou un message indiquant qu'il n'existe pas.
        - Le nombre d'it√©rations utilis√©es par chaque m√©thode.

.. step::
    **Exemple de cas d√©monstratif**

    - Fournissez un exemple de liste tri√©e o√π la recherche par interpolation est plus efficace que la recherche dichotomique.  
    Par exemple, une liste avec des valeurs fortement dispers√©es :  
    ``1, 10, 100, 1000, 10000, 100000``

    - Expliquez pourquoi, pour chercher un nombre proche de la fin de la liste, la recherche par interpolation est plus rapide.  
    Expliquer aussi dans quel cas la recherche par dichotomie est plus efficace.

**Exemple de r√©sultat attendu** :
.. spoiler::
    1. **Contenu de ``data.txt``** :  

        - ``1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31``

    2. **Entr√©e utilisateur** :  

        - Entrez le nombre √† rechercher : 19

    3. **Contenu de ``resultat.txt`` apr√®s ex√©cution** :  
        
        - R√©sultat de la recherche pour le nombre 19 :

            - Recherche par interpolation : trouv√© √† l'index 9 en 1 it√©ration.
            - Recherche dichotomique : trouv√© √† l'index 9 en 3 it√©rations.
    4. **Explication avec la liste fortement dispers√©e** :  

        - Si la liste est : ``1, 10, 100, 1000, 10000, 100000``
        - Chercher 100000 donnera les r√©sultats suivants :

            - Recherche par interpolation : 1 it√©ration.
            - Recherche dichotomique : 3 it√©rations.

üå∂Ô∏è Exercice 22 : Jeu de Nim
---------------------------

Impl√©mentez un jeu interactif de Nim o√π deux joueurs (humains ou un humain contre l'ordinateur) s'affrontent. Pour cela, vous devrez impl√©menter plusieurs fonctionnalit√©s :

.. step:: reset
    - **Affichage du plateau** : Le programme doit afficher l‚Äô√©tat des piles √† chaque tour.
.. step::
    - **Entr√©e utilisateur** : Chaque joueur doit pouvoir choisir une pile et le nombre d‚Äôobjets √† retirer.
.. step::
    - **Tour de l'ordinateur** : Impl√©mentez une strat√©gie pour l‚Äôordinateur :
        - Une strat√©gie simple (ex : retirer un objet).
        - Une strat√©gie optimale (ex : parit√© binaire XOR).
.. step::
    - **Gestion des erreurs** : V√©rifiez la validit√© des choix des joueurs (pile existante, non vide, etc.).
.. step::    
    - **Fin du jeu** : Le jeu se termine lorsqu‚Äôil n‚Äôy a plus d‚Äôobjets. Le joueur qui devait jouer perd la partie.
.. step::    
    - **Enregistrement des scores** : √Ä la fin de chaque partie, enregistrez les r√©sultats (gagnant, perdant, et nombre de tours) dans un fichier ``scores.txt``. Ce fichier doit √™tre mis √† jour √† chaque nouvelle partie.
.. step::      
    - **Mode multijoueur** : Permettez √† deux joueurs humains de jouer.
.. step::      
    - **Rejouer ou changer de mode** : Apr√®s chaque partie, offrez la possibilit√© de rejouer ou de choisir un mode diff√©rent.
.. step::      
    - **Statistiques des parties** : Affichez √† la fin de chaque partie les statistiques cumul√©es (nombre de victoires, d√©faites pour chaque joueur).
.. step::      
    - **Affichage de l‚Äôhistorique** : Ajoutez une option pour afficher l‚Äôhistorique complet des parties enregistr√©es dans ``scores.txt``.

**Exemple de r√©sultat attendu** :
.. spoiler::
    .. code-block:: text
        >> Bienvenue au jeu de Nim !
        >> Choisissez le mode de jeu : 1 (Joueur vs Joueur) ou 2 (Joueur vs Ordinateur) : 2
        >> Choisissez la difficult√© : 1 (Simple) ou 2 (Optimale) : 1

        >> √âtat actuel des piles :
        >> Pile 1: ||||| (5)
        >> Pile 2: ||||||| (7)
        >> Pile 3: ||| (3)

        >> C'est au tour du joueur 1.
        >> Choisissez une pile (1, 2 ou 3) : 2
        >> Combien d'objets voulez-vous retirer de la pile 2 ? 1

        >> √âtat actuel des piles :
        >> Pile 1: ||||| (5)
        >> Pile 2: |||||| (6)
        >> Pile 3: ||| (3)

        >> C'est au tour du joueur 2.
        >> L'ordinateur retire 1 objets de la pile 1.

        >> √âtat actuel des piles :
        >> Pile 1: |||| (4)
        >> Pile 2: |||||| (6)
        >> Pile 3: ||| (3)

        >> C'est au tour du joueur 1.
        >> Choisissez une pile (1, 2 ou 3) : 


üå∂Ô∏è Exercice 23 : Cryptage et D√©cryptage de messages avec Cl√©s Multiples
------------------------------------------------------

Impl√©mentez un programme qui permet de crypter et de d√©crypter des messages en utilisant diff√©rentes cl√©s de chiffrement. Les messages crypt√©s et d√©crypt√©s seront enregistr√©s dans des fichiers, et le programme proposera une gestion dynamique des cl√©s utilis√©es. Le cryptage est un processus visant √† rendre un message illisible afin de le prot√©ger. Le d√©cryptage permet de retrouver le message original gr√¢ce √† une cl√©.

Dans cet exercice, vous utiliserez essentiellement le chiffrement par d√©calage ASCII, une m√©thode o√π chaque caract√®re est d√©cal√© d'un certain nombre de positions dans la table ASCII, d√©termin√© par une cl√©. Par exemple, si la cl√© est ``3``, le caract√®re ``A`` devient ``D``, et ``Z`` revient √† ``C`` gr√¢ce √† un effet circulaire.

Votre programme doit permettre √† l‚Äôutilisateur d‚Äôinteragir avec les messages et les cl√©s, et d‚Äôenregistrer les r√©sultats dans des fichiers sp√©cifiques. Vous devrez g√©rer les cl√©s via un fichier ``cles.txt``, les messages crypt√©s dans ``message_crypte.txt`` et les messages d√©crypt√©s dans ``message_decrypte.txt``.

Le programme devra inclure les fonctionnalit√©s suivantes :

1. **Choix de l'op√©ration** : Proposez √† l'utilisateur un menu interactif lui permettant de choisir entre crypter ou d√©crypter un message.
2. **Gestion des cl√©s** : G√©rez les cl√©s de chiffrement/d√©chiffrement via un fichier ``cles.txt`` :
   - Permettez d‚Äôafficher les cl√©s disponibles.
   - Ajoutez ou supprimez des cl√©s dans ce fichier.
3. **Cryptage** :
   - L'utilisateur doit pouvoir choisir une cl√© pour crypter les messages contenus dans le fichier ``messages_a_crypter.txt``.
   - Les messages crypt√©s seront enregistr√©s dans un fichier ``message_crypte.txt``.
4. **D√©cryptage** :
   - L'utilisateur doit pouvoir choisir une cl√© pour d√©crypter un fichier ``message_crypte.txt``.
   - Si la cl√© utilis√©e est correcte, les messages originaux seront affich√©s et enregistr√©s dans ``message_decrypte.txt``.
5. **Validation et gestion des erreurs** :
   - V√©rifiez que les cl√©s saisies existent et que les fichiers n√©cessaires sont disponibles.
6. **Fonctionnalit√©s suppl√©mentaires** :
   - Proposez diff√©rents algorithmes de cryptage comme :
     - **Chiffrement par substitution** : chaque caract√®re est remplac√© par un autre selon une correspondance d√©finie.
     - **Chiffrement par transposition** : l'ordre des caract√®res dans le message est r√©organis√© selon une r√®gle sp√©cifique.
     - **Chiffrement XOR** : chaque caract√®re est transform√© en appliquant une op√©ration logique XOR avec une cl√© binaire.
     - **Chiffrement asym√©trique** : utilisez une paire de cl√©s (publique et priv√©e) pour s√©curiser les communications.
   - Ajoutez une option pour afficher l‚Äôhistorique des messages crypt√©s et d√©crypt√©s.

**Exemple de r√©sultat attendu** :
.. spoiler::
    .. code-block:: text
        >> === MENU PRINCIPAL ===
        >> 1. Afficher les cl√©s disponibles
        >> 2. Ajouter une cl√©
        >> 3. Supprimer une cl√©
        >> 4. Crypter un message
        >> 5. D√©crypter un message
        >> 6. Afficher l'historique
        >> 7. Quitter
        >> Entrez votre choix : 2
        >> Entrez une nouvelle cl√© (nombre entier) : 3
        >> Cl√© 3 ajout√©e.
 
        >> === MENU PRINCIPAL ===
        >> 1. Afficher les cl√©s disponibles
        >> 2. Ajouter une cl√©
        >> 3. Supprimer une cl√©
        >> 4. Crypter un message
        >> 5. D√©crypter un message
        >> 6. Afficher l'historique
        >> 7. Quitter
        >> Entrez votre choix : 4
 
        >> Messages disponibles √† crypter :
        >> 1. Exemple de message √† crypter 1
        >> 2. Exemple de message √† crypter 2
        >> Entrez le num√©ro du message √† crypter : 1
 
        >> Cl√©s disponibles :
        >> 1. 3
        >> 2. 5
        >> 3. 3
        >> Entrez le num√©ro de la cl√© √† utiliser : 1
 
        >> Choisissez le type de cryptage:
        >> 1. Chiffrement par d√©calage ASCII
        >> 2. Chiffrement par substitution
        >> 3. Chiffrement par transposition
        >> 4. Chiffrement XOR
        >> 5. Chiffrement asym√©trique
        >> Entrez votre choix : 1
        >> Message crypt√© enregistr√© dans message_crypte.txt.
 
        >> === MENU PRINCIPAL ===
        >> 1. Afficher les cl√©s disponibles
        >> 2. Ajouter une cl√©
        >> 3. Supprimer une cl√©
        >> 4. Crypter un message
        >> 5. D√©crypter un message
        >> 6. Afficher l'historique
        >> 7. Quitter
        >> Entrez votre choix : 5
 
        >> Cl√©s disponibles :
        >> 1. 3
        >> 2. 5
        >> 3. 3
        >> Entrez le num√©ro de la cl√© √† utiliser : 1
 
        >> Choisissez le type de d√©cryptage:
        >> 1. Chiffrement par d√©calage ASCII
        >> 2. Chiffrement par substitution
        >> 3. Chiffrement par transposition
        >> 4. Chiffrement XOR
        >> Entrez votre choix : 1
        >> Message d√©crypt√© enregistr√© dans message_decrypte.txt.
 
        >> === MENU PRINCIPAL ===
        >> 1. Afficher les cl√©s disponibles
        >> 2. Ajouter une cl√©
        >> 3. Supprimer une cl√©
        >> 4. Crypter un message
        >> 5. D√©crypter un message
        >> 6. Afficher l'historique
        >> 7. Quitter
        >> Entrez votre choix : 7
        >> Au revoir !
