.. slide::

Chapitre 4 - Modules, Affichage avanc√©
======================================

üéØ Objectifs du Chapitre
---------------------

.. important:: 
    - Apprendre √† utiliser des modules/packages pour organiser et enrichir les programmes.
    - Apprendre √† installer et utiliser des modules externes avec le gestionnaire de paquets pip.
    - D√©couvrir des techniques avanc√©es pour afficher les donn√©es de mani√®re pr√©cise avec la fonction print().
    - Apprendre √† arrondir et tronquer des nombres pour un affichage plus lisible.

.. slide::
üìñ Les modules
--------------

Qu'est-ce qu'un module ?
~~~~~~~~~~~~~~~~~~~~~~~~
.. note::
    Un module est un fichier contenant des **d√©finitions de fonctions**, **variables** ou **classes**, qui peuvent √™tre r√©utilis√©es dans d'autres fichiers. Python poss√®de de nombreux modules int√©gr√©s (comme ``math``, ``random``, ``datetime``), mais vous pouvez √©galement cr√©er vos propres modules.

.. slide::
Importer un module
~~~~~~~~~~~~~~~~~~

Pour utiliser un module, on l'importe dans le programme avec l'instruction ``import``. 

.. warning::
    Par exemple, pour importer le module ``math`` :
    .. code-block:: python
        import math

        # Utilisation de la fonction racine carr√©e du module math
        print(math.sqrt(16))
        >> 4.0

.. slide::
On peut √©galement importer des fonctions sp√©cifiques d‚Äôun module que l'on souhaite utiliser sans avoir √† pr√©ciser le nom du module √† chaque utilisation.

.. warning::
    Par exemple, pour importer la fonction ``sqrt`` du module ``math`` :
    .. code-block:: python
        from math import sqrt

        # Utilisation de la fonction racine carr√©e du module math
        print(sqrt(25))
        >> 5.0

.. slide::
On peut aussi renommer un module ou une fonction import√©e pour simplifier son utilisation.

.. warning::
    Par exemple, pour renommer le module ``math`` en ``m`` :
    .. code-block:: python
        import math as m

        # Utilisation de la fonction racine carr√©e du module math
        print(m.sqrt(36))
        >> 6.0

.. slide::
Modules int√©gr√©s
~~~~~~~~~~~~~~~~

Python poss√®de de nombreux modules int√©gr√©s qui permettent d'ajouter des fonctionnalit√©s √† vos programmes. Voici quelques exemples de modules couramment utilis√©s :

- ``math`` : fonctions math√©matiques (racine carr√©e, cosinus, sinus, exponentielle, logarithme, etc.)

.. warning::
    Exemple :
    .. code-block:: python
        import math

        # Calcul de la racine carr√©e de 16
        print(math.sqrt(16))
        >> 4.0

.. slide::
- ``random`` : g√©n√©ration de nombres al√©atoires

.. warning::
    Exemple :
    .. code-block:: python
        import random

        # G√©n√©rer un nombre al√©atoire entre 1 et 10
        print(random.randint(1, 10))
        >> 7

.. slide::
- ``datetime`` : manipulation de dates et d'heures

.. warning::
    Exemple :
    .. code-block:: python
        from datetime import datetime

        # Afficher la date et l'heure actuelles
        print(datetime.now())
        >> 2021-09-15 15:30:00.000000

.. slide::
Installer des modules externes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

En plus des modules int√©gr√©s √† Python, il existe de nombreux modules cr√©√©s par la communaut√©, disponibles sur le Python Package Index (PyPI). Ces modules peuvent √™tre install√©s pour √©tendre les capacit√©s de Python, par exemple pour des applications de data science, de d√©veloppement web, de visualisation de donn√©es, etc.

Exemples de modules externes couramment utilis√©s :

- ``numpy`` : pour des calculs num√©riques avanc√©s et la manipulation de tableaux.
- ``pandas`` : pour l‚Äôanalyse de donn√©es.
- ``matplotlib`` : pour la visualisation de donn√©es.

``pip`` est le **gestionnaire de paquets Python**. Il permet d‚Äô**installer**, **mettre √† jour** et **d√©sinstaller** des modules externes.

On peut installer un module externe avec la commande suivante (√† ex√©cuter dans un terminal) :
.. code-block:: bash
    pip install nom_du_module

.. warning::
    Par exemple, pour installer le module ``numpy`` :
    .. code-block:: bash
        pip install numpy

On peut le mettre √† jour avec la commande suivante :
.. code-block:: bash
    pip install --upgrade nom_du_module

Ou le d√©sinstaller avec la commande suivante :
.. code-block:: bash
    pip uninstall nom_du_module


.. slide::
Cr√©er et utiliser ses propres modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Vous pouvez cr√©er vos propres modules en enregistrant des fonctions dans un fichier .py, puis en les important dans un autre fichier.

.. warning::
    Exemple :

    - Cr√©ation d'un fichier ``operations.py`` contenant les fonctions ``addition`` et ``soustraction``.

    .. code-block:: python
        # Contenu du fichier operations.py
        def addition(a, b):
            return a + b

        def soustraction(a, b):
            return a - b
        
        def multiplication(a, b):
            return a * b

    - Importation du module ``operations`` dans un autre fichier :

    .. code-block:: python
        # Trois fa√ßons d'importer un module ou une fonction sp√©cifique d'un module :
        # 1. Importer le module operations et le renommer en op
        import operations as op 
        # 2. Importer la fonction soustraction du module operations
        from operations import soustraction 
        # 3. Importer la fonction multiplication du module operations et la renommer en mult
        from operations import multiplication as mult 

        # Utiliser les fonctions addition et soustraction du module operations
        print(op.addition(5, 3))
        >> 8
        print(soustraction(5, 3))
        >> 2
        print(mult(5, 3))
        >> 15


.. slide::
üìñ Notion de package/biblioth√®que
------------------------------

Qu'est-ce qu'un package ?
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::
    Un **package** ou **biblioth√®que** est une collection de modules regroup√©s dans un dossier. Cela permet de structurer un projet en organisant les modules de mani√®re hi√©rarchique et logique. Les packages sont particuli√®rement utiles pour les projets de grande envergure comportant plusieurs modules interd√©pendants.

En Python, un package est simplement un dossier contenant des modules (fichiers ``.py``) et un fichier sp√©cial nomm√© ``__init__.py``, qui permet √† Python de reconna√Ætre le dossier comme un package.

.. slide::
Structure d'un package
~~~~~~~~~~~~~~~~~~~~~~~

Voici un exemple de structure de package avec un dossier ``mon_projet`` qui contient un package ``calculs``, avec deux modules ``operations.py`` et ``statistiques.py`` :

.. code-block::
    mon_projet/
    ‚îÇ
    ‚îú‚îÄ‚îÄ main.py                  # Fichier principal du projet
    ‚îÇ
    ‚îî‚îÄ‚îÄ calculs/                 # Dossier du package "calculs"
        ‚îú‚îÄ‚îÄ __init__.py          # Fichier sp√©cial pour d√©finir le package
        ‚îú‚îÄ‚îÄ operations.py        # Module pour les op√©rations math√©matiques de base
        ‚îî‚îÄ‚îÄ statistiques.py      # Module pour les calculs statistiques

``__init__.py ``: Ce fichier peut √™tre vide, mais il doit exister pour que Python reconnaisse le dossier comme un package. Il est possible d‚Äôy inclure du code pour initialiser le package ou pour sp√©cifier des modules sp√©cifiques qui seront accessibles directement depuis le package.

.. slide::
Cr√©er et utiliser un package
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Cr√©ation d'un package**

Supposons que nous souhaitons cr√©er un package ``calculs`` pour regrouper des fonctions math√©matiques de base et des fonctions de statistiques.

On commence par cr√©er un dossier ``calculs`` dans lequel se trouve un fichier ``__init__.py`` (il peut rester vide pour l‚Äôinstant). On y ajoute deux modules ``operations.py`` et ``statistiques.py`` avec des fonctions sp√©cifiques.

.. warning::
    Exemple :
    .. code-block:: python
        # Module operations.py
        def addition(a, b):
            return a + b

        def soustraction(a, b):
            return a - b

    .. code-block:: python
        # Module statistiques.py
        def moyenne(liste):
            return sum(liste) / len(liste)

        def variance(liste):
            m = moyenne(liste)
            return sum((x - m) ** 2 for x in liste) / len(liste)

.. slide::
**Importer des modules depuis un package**

Dans le fichier principal (``main.py``), on peut maintenant importer les fonctions des modules ``operations`` et ``statistiques`` du package ``calculs``.

.. warning::
    Exemple :
    .. code-block:: python
        # main.py

        # Importation des fonctions du package calculs
        from calculs.operations import addition, soustraction
        from calculs.statistiques import moyenne, variance

        # Utilisation des fonctions
        resultat_addition = addition(5, 3)
        resultat_moyenne = moyenne([1, 2, 3, 4, 5])

        print("R√©sultat de l'addition :", resultat_addition)
        print("Moyenne des valeurs :", resultat_moyenne)

.. slide::
**Utiliser ``__init__.py`` pour simplifier les imports**

Le fichier ``__init__.py`` permet de d√©finir ce qui sera accessible directement depuis le package. Par exemple, si vous voulez que l‚Äôon puisse acc√©der √† ``addition`` et ``moyenne`` directement via le package ``calculs``, ajoutez ces importations dans ``__init__.py``.

.. warning::
    Exemple de contenu de ``__init__.py`` :
    .. code-block:: python
        from .operations import addition, soustraction
        from .statistiques import moyenne, variance

.. slide::
Avec cette configuration, on peut maintenant importer les fonctions directement depuis ``calculs``, sans sp√©cifier les modules :

.. warning::
    Exemple :
    .. code-block:: python
        # main.py

        # Importation des fonctions du package calculs
        from calculs import addition, moyenne

        # Utilisation des fonctions
        resultat_addition = addition(5, 3)
        resultat_moyenne = moyenne([1, 2, 3, 4, 5])

        print("R√©sultat de l'addition :", resultat_addition)
        print("Moyenne des valeurs :", resultat_moyenne)

.. slide::
‚úèÔ∏è Exercice 11 : Simulateur de statistiques sportives
---------------------------------------

**Objectif** :
Dans cet exercice, vous allez cr√©er un simulateur de statistiques sportives pour une √©quipe de football. Le simulateur utilisera un package nomm√© ``football_stats`` pour regrouper diff√©rentes fonctionnalit√©s li√©es aux statistiques des matchs.

    - Cr√©er un package ``football_stats`` qui contient plusieurs modules pour g√©rer les statistiques des joueurs et des √©quipes.
    - Simuler les performances d'une √©quipe sur plusieurs matchs.
    - Calculer des statistiques avanc√©es (comme le nombre moyen de buts par match, le taux de possession, et les passes r√©ussies).
    - Utiliser des concepts comme les fonctions al√©atoires, les calculs statistiques et la structuration en packages.

.. note::
    Comme pour n'importe quel exercice, il est **fortement recommand√©** de le lire en entier avant de commencer √† coder. Cela vous permettra de mieux comprendre les attentes et m√™me de gagner du temps en r√©fl√©chissant √† la logique de votre programme avant de commencer √† l'√©crire.

**Consignes** :

.. slide::
.. step:: reset
    **Etape 1 : Structure**  
    Vous allez cr√©er un package football_stats qui contiendra les modules suivants :
    .. code-block:: bash
        football_stats/
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ match.py           # Contient les fonctions pour simuler un match et g√©n√©rer des statistiques
        ‚îú‚îÄ‚îÄ equipe.py          # Contient les fonctions pour g√©rer les informations de l'√©quipe
        ‚îî‚îÄ‚îÄ statistiques.py     # Contient les fonctions pour calculer les statistiques avanc√©es
        main.py                 # Fichier principal pour ex√©cuter la simulation

.. slide::
.. step::
    **Etape 2 : Module ``equipe.py``**  
    Dans le module ``equipe.py``, cr√©ez une fonction pour initialiser une √©quipe et une autre pour afficher les informations de base de l‚Äô√©quipe (nom, nombre de joueurs, etc.).

    D√©tails des fonctions dans ``equipe.py``:

        - ``creer_equipe(nom, joueurs)`` : prend en entr√©e le nom de l‚Äô√©quipe et une liste de noms de joueurs et retourne un dictionnaire avec le nom de l'√©quipe, la liste des joueurs et le nombre de joueurs.
        - ``afficher_equipe(equipe)`` : prend en entr√©e une √©quipe et affiche les informations de l'√©quipe sous un format clair.

.. slide::
.. step::
    **Etape 3 : Module ``match.py``**  
    Dans ``match.py``, vous allez √©crire des fonctions pour simuler un match et g√©n√©rer les statistiques associ√©es. Utilisez le module ``random`` pour simuler les √©v√©nements.

    D√©tails des fonctions dans ``match.py``

        - ``simuler_match()`` : simule un match pour une √©quipe.
            * G√©n√©re un nombre al√©atoire de buts entre 0 et 5 pour l‚Äô√©quipe.
            * G√©n√©re des statistiques al√©atoires de possession (entre 40% et 60%), de tirs (entre 5 et 20), et de passes r√©ussies (entre 70% et 90%).
        La fonction prend en entr√©e une √©quipe et retourne un dictionnaire de statistiques (buts, possession, tirs, passes r√©ussies).

        - ``afficher_statistiques_match(stats)`` : prend en entr√©e un dictionnaire ``stats`` (contenant les statistiques g√©n√©r√©es par ``simuler_match()``) et les affiche sous un format lisible.

.. slide::
.. step::
    **Etape 4 : Module ``statistiques.py``**  
    Dans ``statistiques.py``, vous allez √©crire des fonctions pour calculer des statistiques avanc√©es pour une s√©rie de matchs, comme la moyenne de buts par match ou le taux de r√©ussite de passes.

    D√©tails des fonctions dans ``statistiques.py``

        - ``moyenne_buts_par_match(liste_buts)`` : prend une liste des buts marqu√©s sur plusieurs matchs et retourne la moyenne.
        - ``taux_reussite_passes(liste_passes)`` : prend une liste de pourcentages de passes r√©ussies et retourne le taux moyen.
        - ``moyenne_possession(liste_possession)`` : prend une liste de pourcentages de possession et retourne la possession moyenne.

.. slide::
.. step::
    **Etape 5 : Utiliser le fichier ``__init__.py``**  
    Dans ``__init__.py``, importez les fonctions principales des modules pour simplifier leur utilisation.

    **Aide :**
    .. spoiler::
        Exemple de contenu de ``__init__.py`` :
        .. code-block:: python
            # football_stats/__init__.py

            from .equipe import creer_equipe, afficher_equipe
            from .match import simuler_match, afficher_statistiques_match
            from .statistiques import moyenne_buts_par_match, taux_reussite_passes, moyenne_possession

.. slide::
.. step::
    **Etape 6 : Utiliser le package dans le ``main.py``**  
    Dans main.py, vous allez :

    1. Cr√©er une √©quipe avec creer_equipe.
    2. Simuler plusieurs matchs pour cette √©quipe.
    3. Stocker les statistiques g√©n√©r√©es pour chaque match.
    4. Calculer et afficher les statistiques avanc√©es sur la s√©rie de matchs.

.. slide::
**R√©sum√© des fonctions √† impl√©menter :**  

- Module ``equipe.py`` :
    * ``creer_equipe(nom, joueurs)`` : cr√©e un dictionnaire d'√©quipe.
    * ``afficher_equipe(equipe)`` : affiche les informations de l‚Äô√©quipe.
- Module ``match.py`` :
    * ``simuler_match(equipe)`` : g√©n√®re des statistiques al√©atoires pour un match.
    * ``afficher_statistiques_match(stats)`` : affiche les statistiques d‚Äôun match.
- Module statistiques.py :
    * ``moyenne_buts_par_match(liste_buts)`` : calcule la moyenne des buts sur plusieurs matchs.
    * ``taux_reussite_passes(liste_passes)`` : calcule le taux moyen de passes r√©ussies.
    * ``moyenne_possession(liste_possession)`` : calcule la possession moyenne.

.. slide::
**R√©sultat attendu :**

.. code-block:: bash
    >> --- Informations de l √©quipe ---
    >> Nom de l √©quipe : Les Scarab√©s du Br√©sil
    >> Nombre de joueurs : 5
    >> Liste des joueurs :
    >> - Alice
    >> - Bob
    >> - Charlie
    >> - Diana
    >> - Eve

    >> --- Match 1 ---
    >> Buts marqu√©s : 5
    >> Possession : 44%
    >> Tirs : 19
    >> Passes r√©ussies : 78%

    >> --- Match 2 ---
    >> Buts marqu√©s : 0
    >> Possession : 48%
    >> Tirs : 12
    >> Passes r√©ussies : 70%

    >> --- Match 3 ---
    >> Buts marqu√©s : 1
    >> Possession : 45%
    >> Tirs : 6
    >> Passes r√©ussies : 82%

    >> --- Match 4 ---
    >> Buts marqu√©s : 1
    >> Possession : 41%
    >> Tirs : 17
    >> Passes r√©ussies : 84%

    >> --- Match 5 ---
    >> Buts marqu√©s : 4
    >> Possession : 43%
    >> Tirs : 13
    >> Passes r√©ussies : 90%

    >> --- Statistiques de la saison ---
    >> Moyenne de buts par match : 2.20
    >> Taux de r√©ussite moyen des passes : 80.80%
    >> Possession moyenne : 44.20%

.. success::
    Vous savez maintenant cr√©er et utiliser des packages pour organiser vos programmes, ainsi que des modules pour regrouper des fonctions li√©es. Vous avez √©galement appris √† importer des modules externes et √† les utiliser dans vos programmes.

.. slide::
üìñ Approximer des nombres
-------------------------
Les nombres en Python peuvent √™tre affich√©s avec une pr√©cision contr√¥l√©e. Cela est utile pour afficher des nombres d√©cimaux de mani√®re coh√©rente, par exemple avec deux chiffres apr√®s la virgule.

La fonction ``round()``
~~~~~~~~~~~~~~~~~~~~~~~~

La fonction round() permet d‚Äôarrondir un nombre √† un nombre de d√©cimales pr√©cis√©.

Syntaxe : ``round(nombre, d√©cimales)``

.. warning::
    Exemple :
    .. code-block:: python
        pi = 3.141592653589
        print(round(pi, 2))
        >> 3.14

Si le nombre de d√©cimales n‚Äôest pas pr√©cis√©, round() arrondit √† l‚Äôentier le plus proche.

.. warning::
    Exemple :
    .. code-block:: python
        pi = 3.141592653589
        print(round(pi))
        >> 3

.. slide::
Les approximations avec le module ``math``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour arrondir ou tronquer un nombre sans sp√©cifier le nombre de d√©cimales, Python offre plusieurs fonctions dans le module math :

* ``math.ceil()`` : Arrondit au plus proche entier sup√©rieur.
* ``math.floor()`` : Arrondit au plus proche entier inf√©rieur.
* ``math.trunc()`` : Tronque le nombre √† sa partie enti√®re, sans arrondi (√©quivalent de ``int()``).

.. warning::
    Exemple :
    .. code-block:: python
        import math

        nombre = 3.7

        print(math.ceil(nombre))   # Sortie : 4 (arrondi au sup√©rieur)
        print(math.floor(nombre))  # Sortie : 3 (arrondi √† l'inf√©rieur)
        print(math.trunc(nombre))  # Sortie : 3 (troncature sans arrondi)

.. slide::
Pour les nombres n√©gatifs, la diff√©rence entre ``math.floor()`` et ``math.trunc()`` est importante

.. warning::
    Exemple :
    .. code-block:: python
        import math

        nombre_negatif = -3.7

        print(math.ceil(nombre_negatif))   # Sortie : -3 (arrondi au sup√©rieur)
        print(math.floor(nombre_negatif))  # Sortie : -4 (arrondi √† l'inf√©rieur)
        print(math.trunc(nombre_negatif))  # Sortie : -3 (troncature sans arrondi)

.. slide::
üìñ Affichage avanc√© avec la fonction ``print()``
------------------------------------------------

Rappels de base de la fonction ``print()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

La fonction ``print()`` permet d'afficher des donn√©es √† l'√©cran. Par d√©faut, elle prend en entr√©e un ou plusieurs √©l√©ments s√©par√©s par des virgules et les affiche de mani√®re cons√©cutive, s√©par√©s par un espace.

.. warning::
    Exemple :
    .. code-block:: python
        nom = "Alice"
        age = 25
        print("Nom :", nom, "- Age :", age)
        >> Nom : Alice - Age : 25

.. slide::
Formatage des cha√Ænes de caract√®res
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**L'op√©rateur de formatage ``%``**

Python permet de formater les cha√Ænes avec l'op√©rateur ``%``, en pr√©cisant le type de variable que l‚Äôon souhaite ins√©rer (par exemple ``%s`` pour ``str``, ``%d`` pour ``int``, ``%f`` pour ``float``).

.. warning::
    Exemple :
    .. code-block:: python
        nom = "Alice"
        age = 25
        print("Nom : %s - Age : %d" % (nom, age))
        >> Nom : Alice - Age : 25

.. slide::
**La m√©thode ``format()``**

La m√©thode ``format()`` permet de sp√©cifier des emplacements ``{}`` o√π les valeurs seront ins√©r√©es dans la cha√Æne de caract√®res.

.. warning::
    Exemple :
    .. code-block:: python
        nom = "Alice"
        age = 25
        print("Nom : {} - Age : {}".format(nom, age))
        >> Nom : Alice - Age : 25

On peut √©galement sp√©cifier l'ordre des valeurs √† ins√©rer en utilisant des indices.

.. warning::
    Exemple :
    .. code-block:: python
        nom = "Alice"
        age = 25
        print("Age : {1} - Nom : {0}".format(nom, age))
        >> Age : 25 - Nom : Alice

.. slide::
**Les f-strings (``f''``)**

Les f-strings permettent de mettre des variables directement dans la cha√Æne en ajoutant un f avant les guillemets. 
.. note::
    Cette m√©thode est **rapide** et **lisible**, c'est la plus recommand√©e et donc **celle que nous utiliserons √† partir de maintenant dans ce cours**.

.. warning::
    Exemple :
    .. code-block:: python
        nom = "Alice"
        age = 25
        print(f"Nom : {nom} - Age : {age}")
        >> Nom : Alice - Age : 25

.. slide::
Formatage de nombres flottants
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Avec le formatage avanc√© de ``print()``, on peut contr√¥ler pr√©cis√©ment l'affichage des nombres d√©cimaux.

**Formatage avec la m√©thode ``format()``**

Utiliser ``:.nf`` dans ``format()`` pour sp√©cifier le nombre de d√©cimales (``n`` √©tant le nombre de d√©cimales).

.. warning::
    Exemple :
    .. code-block:: python
        pi = 3.141592653589
        print("Pi arrondi √† 2 d√©cimales : {:.2f}".format(pi))
        >> Pi arrondi √† 2 d√©cimales : 3.14

**Formatage avec les f-strings**

Les f-strings permettent √©galement d‚Äôafficher un nombre de d√©cimales pr√©cis en ajoutant ``:.nf`` directement dans l'expression.

.. warning::
    Exemple :
    .. code-block:: python
        pi = 3.141592653589
        print(f"Pi arrondi √† 3 d√©cimales : {pi:.3f}")
        >> Pi arrondi √† 3 d√©cimales : 3.142

.. slide::
Exemples de formatage avanc√©
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Alignement**

Il est souvent utile d'aligner les √©l√©ments pour cr√©er des tableaux ou des rapports format√©s, o√π le texte et les nombres sont align√©s de mani√®re uniforme. Les f-strings et la m√©thode format() permettent d'ajuster la largeur de chaque champ et de sp√©cifier l'alignement des donn√©es.

Les options de formatage pour l‚Äôalignement incluent :

- ``<`` : aligner √† gauche.
- ``>`` : aligner √† droite.
- ``^`` : centrer le texte.

Dans les f-strings, on peut combiner ces options avec une largeur de champ pour contr√¥ler l‚Äôespace d√©di√© √† chaque √©l√©ment.

.. slide::
.. warning::
    Exemple :
    .. code-block:: python
        produit = "Pommes"
        prix = 1.23456
        quantite = 10

        # Affichage align√©
        print(f"{'Produit':<10} {'Prix':>10} {'Quantit√©':>10}")
        print(f"{produit:<10} {prix:>10.2f} {quantite:>10}")

        >> Produit          Prix    Quantit√©
        >> Pommes           1.23          10
    
    Explications :

    - ``{produit:<10}`` : La cha√Æne ``produit`` est align√©e √† gauche (``<``) dans un espace de 10 caract√®res. Cela garantit que tout ce qui sera affich√© dans cette colonne occupera exactement 10 caract√®res de largeur.
    - ``{prix:>10.2f}`` : La valeur ``prix`` est align√©e √† droite (``>``) dans un espace de 10 caract√®res. Le ``.2f`` sp√©cifie que le nombre sera affich√© avec deux d√©cimales.
    - ``{quantite:>10}`` : La valeur ``quantit√©`` est √©galement align√©e √† droite dans un espace de 10 caract√®res.

.. slide::
**Affichage des pourcentages**

Pour afficher un nombre sous forme de pourcentage, on peut utiliser le formatage ``:.n%`` dans une f-string, o√π ``n`` repr√©sente le nombre de d√©cimales souhait√©es pour le pourcentage. Cela permet d‚Äôafficher les valeurs avec une mise en forme coh√©rente, tout en ajoutant le symbole ``%``.

.. warning::
    Exemple :
    .. code-block:: python
        taux_reussite = 0.857542
        print(f"Taux de reussite : {taux_reussite:.2%}")
        >> Taux de reussite : 85.75%

.. slide::
‚úèÔ∏è Exercice 12 : Une facture bien propre
---------------------------------------

**Objectif** :
Vous √™tes charg√© de d√©velopper un programme de facturation pour une entreprise de vente en ligne. Les prix des produits doivent √™tre calcul√©s pr√©cis√©ment, mais les co√ªts totaux doivent √™tre affich√©s selon diff√©rentes r√®gles d'arrondi et de troncature en fonction des besoins de la comptabilit√© et des utilisateurs finaux.

.. step:: reset
    **Demander** √† l'utilisateur de saisir les informations suivantes pour **trois produits** :

    - Nom du produit.
    - Prix unitaire (un nombre d√©cimal).
    - Quantit√© (un entier).

.. step::
    **Calculer** le co√ªt total pour chaque produit (prix unitaire * quantit√©) et appliquer plusieurs m√©thodes d'arrondi et de troncature pour chaque co√ªt total :

    - Arrondi au sup√©rieur.
    - Arrondi √† l'inf√©rieur. 
    - Troncature sans arrondi. 
    - Arrondi √† deux d√©cimales.

.. step::
    **Afficher** les r√©sultats sous forme de tableau, avec un alignement soign√© des colonnes.

.. step::
    **Calculer** et **afficher** le co√ªt total global des trois produits, en arrondissant cette somme √† l'entier sup√©rieur.

.. slide::
**Resultat attendu :**
.. code-block:: python
    >> Nom du produit 1 : Chaise
    >> Prix unitaire de Chaise (‚Ç¨) : 29.95
    >> Quantit√© de Chaise : 3
    >> Nom du produit 2 : Table
    >> Prix unitaire de Table (‚Ç¨) : 59.99
    >> Quantit√© de Table : 2
    >> Nom du produit 3 : Lampe
    >> Prix unitaire de Lampe (‚Ç¨) : 14.50
    >> Quantit√© de Lampe : 4

    >> Produit       Prix Unitaire (‚Ç¨)   Quantit√©  Total Brut (‚Ç¨)  A.Sup (‚Ç¨)  A.Inf (‚Ç¨)  Tronc (‚Ç¨)    Arrondi2 (‚Ç¨)
    >> ----------------------------------------------------------------------------------------------------------------
    >> Chaise                    29.95          3           89.85         90         89         89           89.85
    >> Table                     59.99          2          119.98        120        119        119          119.98
    >> Lampe                     14.50          4           58.00         58         58         58           58.00
    >> ----------------------------------------------------------------------------------------------------------------
    >> Total facture (arrondi au sup√©rieur) :  268 ‚Ç¨

.. success::
    Vous savez maintenant arrondir et tronquer des nombres pour un affichage plus lisible ainsi qu'utiliser les f-strings pour un affichage plus rapide et lisible. Vous avez √©galement appris √† aligner les √©l√©ments pour cr√©er des tableaux format√©s.

.. slide::
‚úèÔ∏è Exercice 13 : Un bulletin m√©t√©o tr√®s al√©atoire
------------------------------------------------

**Objectif** : Dans cet exercice, vous allez cr√©er un simulateur de bulletin m√©t√©o qui g√©n√®re al√©atoirement des pr√©visions m√©t√©orologiques pour la journ√©e actuelle, en utilisant les biblioth√®ques ``random``, ``math``, et ``datetime``. Vous simulerez des informations comme la temp√©rature, la vitesse du vent, les pr√©cipitations et l'heure du lever et coucher de soleil.

**Consignes** :
.. slide::
.. step:: reset
    *Configurer la date* :

        - Utilisez ``datetime`` pour afficher la date du jour actuel au format "JJ/MM/AAAA".
        - Par d√©faut la date fournie par ``datetime`` est au format "AAAA-MM-JJ". Vous utiliserez donc internet pour trouver comment formater la date en "JJ/MM/AAAA" lors de son affichage. 

.. slide::
.. step::
    *G√©n√©rer les pr√©visions m√©t√©orologiques* :

        - Temp√©rature : Utilisez le module ``random`` pour g√©n√©rer une temp√©rature entre -10 et 35¬∞C.
        - Vitesse du vent : G√©n√©rez une vitesse du vent entre 0 et 100 km/h.
        - Type de m√©t√©o : Cr√©ez une **liste** de types de pr√©cipitations possibles ("Ensoleill√©", "Nuageux", "Pluie", "Neige") et s√©lectionnez-en une au hasard dans la liste avec ``random``.
        - Probabilit√© de pr√©cipitations : Utilisez le module ``random`` pour g√©n√©rer un pourcentage de pr√©cipitations (entre 0% et 100%).

.. slide::
.. step::
    *Heures de lever et coucher de soleil* :

        - En utilisant **obligatoirement** les fonctions suivantes : ``datetime.combine()``, ``datetime.min.time()``, ``timedelta()`` et ``random.randint()``; g√©n√©rez une heure de lever de soleil entre 5h30 et 7h30, et une heure de coucher de soleil entre 18h30 et 20h30. 
        - Pour chaque fonction vous devrez chercher sur internet comment l'utiliser.
    
    **Aide** :
    .. spoiler::
        - En effet, on souhaite garder une association entre les heures de lever et coucher de soleil et la date du jour. Pour cela, on utilise la fonction ``datetime.combine()`` qui permet de combiner une date et une heure pour obtenir un objet ``datetime`` complet. On utilise ensuite la fonction ``timedelta()`` pour ajouter un nombre d'heures et de minutes al√©atoire √† l'heure du lever de soleil pour obtenir l'heure du coucher de soleil.

.. slide::
.. step::
    *Calculer la dur√©e de jour* :

        - Utilisez ``datetime`` pour calculer la dur√©e du jour (en heures et minutes) en soustrayant l‚Äôheure du lever de celle du coucher de soleil.

.. slide::
.. step::
    *Afficher le rapport m√©t√©o* :

        - Organisez les informations g√©n√©r√©es de mani√®re structur√©e et lisible pour l‚Äôutilisateur en **utilisant les f-strings pour l'affichage**.

.. slide::
**R√©sultat attendu** :
.. code-block::
    >> Previsions meteo pour le 31/10/2024
    >> -----------------------------------
    >> Previsions meteorologiques du jour :
    >> Temperature : 26¬∞C
    >> Vitesse du vent : 44 km/h
    >> Conditions : Pluie
    >> Probabilite de precipitations : 30%
    >> Heure du lever de soleil : 07:44
    >> Heure du coucher de soleil : 18:02
    >> Duree du jour : 10:18:00

.. success::
    Vous savez maintenant comment utiliser des modules int√©gr√©s et leurs fonctions afin d'enrichir vos programmes tout en apprenant √† formater les dates et les nombres pour un affichage plus lisible.

.. slide::
üèãÔ∏è Exercices suppl√©mentaires
--------------------

.. toctree::

    exos_sup_chap4