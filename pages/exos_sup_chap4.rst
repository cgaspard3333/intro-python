üèãÔ∏è Exercices suppl√©mentaires
=========================
.. slide::
Sur cette page se trouvent des exercices suppl√©mentaires pour vous entra√Æner. Ils sont class√©s par niveau de difficult√© :
.. discoverList::
    * Facile : üçÄ
    * Moyen : ‚öñÔ∏è
    * Difficile : üå∂Ô∏è

‚öñÔ∏è Exercice 13 : Gestion de budget personnel avec des modules et formatage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Objectif** :
Cr√©er un programme de gestion de budget personnel permettant de simuler les revenus et les d√©penses mensuelles, de calculer le solde mensuel et d'afficher un r√©sum√© format√© des finances. Ce programme fera appel √† des modules int√©gr√©s de Python et utilisera des techniques d'affichage avanc√©.

**Modules √† utiliser** :

- ``math`` : pour arrondir les valeurs num√©riques.
- ``random`` : pour g√©n√©rer al√©atoirement des revenus et des d√©penses.
- ``datetime`` : pour afficher la date actuelle.
- ``statistics`` (optionnel) : pour calculer des statistiques avanc√©es (par exemple, la moyenne des d√©penses).

**Consignes** :

.. step:: reset
    **Cr√©er et impl√©menter les fonctions suivantes** :

    - ``generer_revenus()`` :
        - Retourne un revenu mensuel al√©atoire compris entre 2000‚Ç¨ et 5000‚Ç¨.
    - ``generer_depenses()`` :
        - Retourne une liste de d√©penses al√©atoires comprenant des cat√©gories telles que le loyer, la nourriture, le transport et les loisirs. Chaque d√©pense doit avoir un montant al√©atoire compris entre 100‚Ç¨ et 1500‚Ç¨.
    - ``calculer_solde(revenus, depenses)`` :
        - Calcule le solde mensuel en soustrayant la somme totale des d√©penses du revenu.
    - ``afficher_resume_financier(revenus, depenses, solde)`` :
        - Affiche un r√©sum√© format√©, incluant les d√©tails des revenus, des d√©penses et du solde mensuel.

.. step::
    **Formatage de l'affichage** :

    - Utilisez des **f-strings** pour afficher les montants financiers arrondis √† deux d√©cimales.
    - Alignez les r√©sultats de mani√®re soign√©e pour cr√©er un tableau clair.
    - Affichez le mois et l'ann√©e actuels en utilisant ``datetime`` pour donner un contexte temporel.

**Exemple de sortie attendue** :

.. code-block:: bash
    >> Rapport financier du mois de Novembre 2024
    >> -----------------------------------------
    >> Revenus totaux : 3,472.50 ‚Ç¨
    >> D√©penses :
    >> - Loyer                : 1,200.00 ‚Ç¨
    >> - Nourriture           :   650.50 ‚Ç¨
    >> - Transport            :   300.75 ‚Ç¨
    >> - Loisirs              :   500.00 ‚Ç¨
    >> -----------------------------------------
    >> Solde mensuel          :   821.25 ‚Ç¨ (Positif)

**Conseils** :

- Utilisez ``random.uniform()`` pour g√©n√©rer des montants avec des valeurs d√©cimales.
- Employez ``math.ceil()``, ``math.floor()`` et ``round()`` pour tester diff√©rentes m√©thodes d'arrondi si n√©cessaire.
- Organisez le code pour assurer une lisibilit√© optimale.


üå∂Ô∏è Exercice 14 : Simulation de navigation robotique intelligente
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Objectif** :
Dans cet exercice, vous allez cr√©er un programme de simulation de navigation robotique. Le programme simulera un robot se d√©pla√ßant sur une grille 10x10, √©vitant des obstacles et atteignant un objectif fix√©. Ce programme utilisera des concepts de base en intelligence artificielle, tels que la prise de d√©cision et la navigation autonome.

**Modules √† utiliser** :

- ``random`` : pour g√©n√©rer des positions al√©atoires d'obstacles et de l'objectif.
- ``math`` : pour calculer la distance entre le robot et l'objectif.
- ``datetime`` (optionnel) : pour mesurer le temps pris par le robot pour atteindre l'objectif.

**Consignes** :

.. step:: reset
    **Cr√©er et impl√©menter les fonctions suivantes** :

    - ``initialiser_grille()`` :
        - Cr√©e et retourne une grille 10x10 remplie de caract√®res vides ``"."``.
    - ``placer_obstacles(grille, nombre_obstacles)`` :
        - Place un nombre donn√© d'obstacles ``"#"`` de mani√®re al√©atoire sur la grille sans chevaucher la position de d√©part du robot ni l'objectif.
    - ``placer_robot_et_objectif(grille)`` :
        - Place le robot ``"R"`` au coin sup√©rieur gauche de la grille et l'objectif ``"X"`` √† une position al√©atoire de la grille.
    - ``afficher_grille(grille)`` :
        - Affiche la grille sous un format lisible pour suivre l'√©tat de la simulation.
    - ``calculer_distance(robot, objectif)`` :
        - Calcule la distance euclidienne entre la position du robot et l'objectif.
    - ``deplacer_robot(grille, robot, objectif)`` :
        - D√©place le robot vers l'objectif en prenant des d√©cisions intelligentes pour √©viter les obstacles et atteindre l'objectif.
        - Le robot doit √©valuer ses d√©placements possibles (haut, bas, gauche, droite) et choisir celui qui minimise la distance vers l'objectif sans entrer en collision avec un obstacle.

.. step::
    **Conditions de d√©placement du robot** :

    - Le robot peut se d√©placer dans les quatre directions : haut, bas, gauche, droite.
    - Si le robot rencontre un obstacle, il doit recalculer sa trajectoire.
    - Impl√©mentez un syst√®me basique de prise de d√©cision pour choisir le meilleur mouvement possible √† chaque √©tape.

**√âtapes d√©taill√©es** :

.. step:: 
    **√âtape 1 : Initialisation de la grille**
    
    - Impl√©mentez ``initialiser_grille()`` pour cr√©er une grille 10x10 vide.
    - Impl√©mentez ``placer_obstacles()`` pour ajouter des obstacles de mani√®re al√©atoire sur la grille.
    - Impl√©mentez ``placer_robot_et_objectif()`` pour positionner le robot et l'objectif.

.. step::
    **√âtape 2 : D√©placement et logique du robot**

    - Impl√©mentez ``calculer_distance()`` pour aider le robot √† choisir le mouvement le rapprochant de l'objectif.
    - Impl√©mentez ``deplacer_robot()`` pour g√©rer les d√©placements et les d√©cisions du robot.
    - Int√©grez un m√©canisme de v√©rification pour emp√™cher le robot de sortir des limites de la grille ou de traverser des obstacles.

.. step::
    **√âtape 3 : Affichage et suivi de l'√©tat**

    - Impl√©mentez ``afficher_grille()`` pour afficher l'√©tat de la grille apr√®s chaque mouvement du robot.
    - Suivez les d√©placements du robot jusqu'√† ce qu'il atteigne l'objectif et affichez le nombre total de mouvements effectu√©s.

**Exemple de sortie attendue** :

.. code-block:: bash
    >> Grille initiale :
    >> R . . . . . . . . .
    >> . . . # . . . . . .
    >> . . . . . . # . . .
    >> . . . . . . . . . .
    >> . # . . . . . . . .
    >> . . . . . . . . . X
    >> . . # . . . . . . .
    >> . . . . . . # . . .
    >> . . . . . . . . . .
    >> . . . . . # . . . .

    >> D√©placement 1 : vers le bas
    >> D√©placement 2 : vers la droite
    >> ...
    >> Objectif atteint en 23 mouvements.

**Conseils** :

- Utilisez ``random.randint()`` pour choisir des positions al√©atoires sur la grille.
- Pour le d√©placement intelligent, comparez la distance actuelle √† la distance r√©sultante de chaque mouvement possible.
- Impl√©mentez un suivi de la position du robot et assurez-vous de marquer chaque position parcourue pour √©viter de repasser par le m√™me endroit.

**Bonus** :

- Ajoutez un compteur de temps pour mesurer la dur√©e totale de la simulation en utilisant ``datetime``.
- Impl√©mentez une strat√©gie de contournement plus sophistiqu√©e en utilisant un algorithme de recherche de chemin simplifi√©.


.. slide::
üå∂Ô∏è Exercice Sup. 15 : Le Vrai Jeu d'Echecs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : A partir du code de l'Exercice Sup. 12 du Chapitre 3, cr√©ez un jeu d'√©checs complet. 

**R√®gles du Jeu d'Echecs** : Vous pouvez trouver les r√®gles du jeu d'√©checs `ici <https://www.apprendre-les-echecs-24h.com/apprendre-a-jouer-aux-echecs/regles-jeu-dechecs/>`_.