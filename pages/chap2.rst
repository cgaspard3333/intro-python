.. slide::

Chapitre 2 - Conditions et boucles
======================

üéØ Objectifs du Chapitre
----------------------

.. important::
    - Apprendre √† √©crire des programmes dynamiques en utilisant des conditions (``if``, ``else``) et des boucles (``for``, ``while``).
    - Comprendre l‚Äôimportance des structures de contr√¥le pour g√©rer le flux d'ex√©cution d'un programme.

.. slide::

üìñ 1. Les conditions (Structures de d√©cision)
--------------

1.1 Principe des conditions
~~~~~~~~~~~~~~~~~~~~~~~

Les structures conditionnelles permettent de prendre des d√©cisions dans un programme. En fonction de certaines conditions, diff√©rentes parties du code peuvent √™tre ex√©cut√©es.

.. discoverList::
    * ``if`` : v√©rifie une condition et ex√©cute le bloc de code associ√© si elle est vraie.
    * ``elif`` : v√©rifie une autre condition lorsque la premi√®re est fausse et ex√©cute le bloc de code associ√© si cette nouvelle condition est vraie.
    * ``else`` : ex√©cute un bloc de code si toutes les conditions pr√©c√©dentes sont fausses

.. warning::
    Exemple :
    .. code-block:: python

        if condition:
            # Bloc de code ex√©cut√© si la condition est vraie
        elif autre_condition:
            # Bloc ex√©cut√© si la premi√®re condition est fausse et l‚Äôautre condition est vraie
        else:
            # Bloc ex√©cut√© si toutes les conditions pr√©c√©dentes sont fausses

.. note::
    Contrairement √† d'autres langages tels que C/C++ ou m√™me Java, Python utilise l‚Äôindentation (l'espace en d√©but de ligne) pour d√©limiter les blocs de code.
    Cette indentation est r√©alis√©e avec la touche ``Tab`` du clavier. Le raccourci ``Shift + Tab`` permet de retirer une indentation.

.. slide::

1.2 Op√©rateurs de comparaison
~~~~~~~~~~~~~~~~~~~~~~~~~

Les op√©rateurs de comparaison permettent de comparer deux valeurs. Ils sont utilis√©s dans les conditions pour v√©rifier si une condition est vraie ou fausse :

.. discoverList::
    * ``==`` : √©gal √†
    * ``!=`` : diff√©rent de
    * ``<`` : inf√©rieur √†
    * ``>`` : sup√©rieur √†
    * ``<=`` : inf√©rieur ou √©gal √†
    * ``>=`` : sup√©rieur ou √©gal √†

.. warning::
    Exemple :
    .. code-block:: python
        age = 18

        if age >= 18:
            print("Vous √™tes majeur.")
        else:
            print("Vous √™tes mineur.")
        >> Vous √™tes majeur.

.. slide::

1.3 Op√©rateurs logiques
~~~~~~~~~~~~~~~~~~~

On peut combiner plusieurs conditions gr√¢ce aux op√©rateurs logiques :

.. discoverList::
    * ``and`` :  toutes les conditions doivent √™tre vraies.
    * ``or`` : au moins une des conditions doit √™tre vraie.
    * ``not`` : inverse la condition.

.. warning::
    Exemple :
    .. code-block:: python
        x = 12
        y = 3

        if x > 5 and y < 10:
            print("Les deux conditions sont vraies.")

        >> Les deux conditions sont vraies.

.. slide::

‚úèÔ∏è Exercice 3 : Un dressing intelligent
------------------------------------

Un exemple d'organisation de vos dossiers/fichiers vous a √©t√© donn√© dans le chapitre pr√©c√©dent, vous pouvez vous en inspirer pour continuer √† travailler de mani√®re organis√©e tout au long de ce cours.

.. note:: 
    Rappel : Toujours ouvrir un dossier √† l'ouverture de VSCode pour travailler √† l'int√©rieur de celui-ci.

**Objectif** : √âcrire un programme qui aide l‚Äôutilisateur √† choisir une tenue en fonction de la temp√©rature qu'il donne. 

.. step:: reset
    **Consigne** : Le programme demande √† l‚Äôutilisateur la temp√©rature ext√©rieure et affiche une tenue de votre choix adapt√©e √† la temp√©rature en fonction des 4 cas suivants :

    .. discoverList::
        * Si la temp√©rature est inf√©rieure √† 0¬∞C
        * Si la temp√©rature est entre 0¬∞C et 10¬∞C
        * Si la temp√©rature est entre 10¬∞C et 20¬∞C
        * Si la temp√©rature est sup√©rieure √† 20¬∞C

.. success:: 
    Vous savez maintenant √©crire des conditions simples.

.. slide::

‚úèÔ∏è Exercice 4 : Les tables de v√©rit√©
--------------------------------------------------------

Voici un tableaux repr√©sentant le resultats des op√©rations logiques ``and`` et ``or`` :

.. center::
    +-------+-------+---------+--------+
    |   A   |   B   | A and B | A or B |
    +=======+=======+=========+========+
    | False | False | False   | False  |
    +-------+-------+---------+--------+
    | False | True  | **?**   | **?**  |
    +-------+-------+---------+--------+
    | True  | True  | **?**   | **?**  |
    +-------+-------+---------+--------+
    | True  | False | **?**   | **?**  |
    +-------+-------+---------+--------+

Ce tableau s'appelle une table de v√©rit√©. Elle permet de d√©terminer le r√©sultat d'une op√©ration logique en fonction des valeurs de v√©rit√© des variables ``A`` et ``B``.

.. step:: reset
    Ecrire un programme qui demande √† l'utilisateur les valeurs de v√©rit√© de ``A`` et ``B`` et affiche les r√©sultats des op√©rations logiques ``and`` et ``or`` afin de compl√©ter les tableaux ci-dessus. 

    .. note::
        La fonction ``bool()`` ne permet pas de convertir les cha√Ænes de caract√®res ``"True"`` ou ``"False"`` en bool√©ens. Pour cela, on utilise la fonction ``eval()``.

.. step::
    Quel est la diff√©rence entre le fonctionnement de la fonction ``bool()`` et de la fonction ``eval()`` ?

.. slide::

.. step::
    Faire de m√™me pour la table de v√©rit√© de l'op√©ration ``not(A and B)`` :

    .. center::
        +-------+-------+------------+
        |   A   |   B   | not(A and B)|
        +=======+=======+============+
        | False | False | **?**      |
        +-------+-------+------------+
        | False | True  | **?**      |
        +-------+-------+------------+
        | True  | True  | **?**      |
        +-------+-------+------------+
        | True  | False | **?**      |
        +-------+-------+------------+

.. slide::

.. step::
    **Sans utiliser l'ordinateur**, remplissez √† la main la table de v√©rit√© de l'op√©ration ``not a or not b`` suivante:

    .. center::
        +-------+-------+-------+-------+------------------+
        |   A   |   B   | not A | not B | not A or not B   |
        +=======+=======+=======+=======+==================+
        | False | False | **?** | **?** | **?**            |
        +-------+-------+-------+-------+------------------+
        | False | True  | **?** | **?** | **?**            |
        +-------+-------+-------+-------+------------------+
        | True  | True  | **?** | **?** | **?**            |
        +-------+-------+-------+-------+------------------+
        | True  | False | **?** | **?** | **?**            |
        +-------+-------+-------+-------+------------------+

.. success::
    Vous savez maintenant manipuler les op√©rateurs logiques et avez d√©couvert les tables de v√©rit√©.

.. slide::
‚úèÔ∏è Exercice 5 : Un dressing encore plus intelligent
------------------------------------

**Objectif** : Am√©liorer le programme de l'exercice 3 en ajoutant √† la temp√©rature une condition sur le temps (pluie, soleil, nuageux).

.. step:: reset
    **Consigne** : Reprenez le code de l'exercice 2. En plus de la temp√©rature, vous devez offrir un choix de temps √† l'utilisateur. Votre programme doit donc fonctionner de la mani√®re suivante :

        1. Demander la temp√©rature ext√©rieure.
        2. Demander le temps qu'il fait.
        3. Afficher une tenue adapt√©e √† la temp√©rature et au temps.

    .. warning::
        Exemple : 
        .. code-block:: python
            
                >> Quelle est la temp√©rature ext√©rieure (en ¬∞C) ? 
                25
                >> Quel temps fait-il ? (choisissez une r√©ponse en tapant le num√©ro correspondant)
                >> 1. Pluie
                >> 2. Soleil
                >> 3. Nuageux
                2
                >> Vous devriez porter un t-shirt et un short.



.. slide::
    
üìñ 2. Les boucles (Structures it√©ratives)
-----------

2.1 La boucle ``for``
~~~~~~~~~~~~~~~~~

La boucle ``for`` permet de r√©p√©ter un bloc de code un nombre d√©termin√© de fois. Elle est souvent utilis√©e pour parcourir des s√©quences (listes, cha√Ænes de caract√®res, etc.)

.. warning::
    Exemple :
    .. code-block:: python

        for variable in s√©quence:
            # Bloc de code ex√©cut√© pour chaque √©l√©ment de la s√©quence
            
    .. code-block:: python
        for i in range(3):
            print(i)
        >> 0
        >> 1
        >> 2

.. slide::

2.2 La boucle ``while``
~~~~~~~~~~~~~~~~~~~

La boucle ``while`` ex√©cute un bloc de code tant qu‚Äôune condition est vraie. 

.. warning::
    Exemple :
    .. code-block:: python

        while condition:
            # Bloc de code ex√©cut√© tant que la condition est vraie

    .. code-block:: python

        compteur = 0
        while compteur < 4:
            print(compteur)
            compteur += 1
        >> 0
        >> 1
        >> 2
        >> 3

.. slide::

2.3 Boucle infinie et sortie de boucle
~~~~~~~~~~~~~~~~~~~~~~~~

Une boucle infinie se produit quand la condition de sortie n‚Äôest jamais atteinte. Cela peut bloquer l‚Äôex√©cution du programme.
On peut interrompre une boucle avec l‚Äôinstruction ``break``.

.. warning::
    Exemple :
    .. code-block:: python

        compteur = 0
        while True:
            print(compteur)
            compteur += 1
            if compteur == 4:
                break
        >> 0
        >> 1
        >> 2
        >> 3

.. slide::

‚úèÔ∏è Exercice 6 : Le juste prix
----------------------------

.. step:: reset
    √âcrire un programme qui demande √† l‚Äôutilisateur de deviner un nombre entier entre 1 et 20 en utilisant le module ``random``. En fonction de sa r√©ponse, il affiche :

    .. discoverList::
        * Si le nombre est trop petit, "Trop petit ! Essayez encore."
        * Si le nombre est trop grand, "Trop grand ! Essayez encore."
        * Si c‚Äôest correct, "Bravo, vous avez trouv√© !"

.. step::
    Cherchez sur internet et expliquer ce qu'est un module en Python et comment l'utiliser.

.. success:: 
    Vous savez maintenant importer et utiliser un module simple (random) ainsi que vous servir d'une boucle ``while``.


.. slide::
üèãÔ∏è Exercices suppl√©mentaires
--------------------

.. toctree::

    exos_sup_chap2

‚úÖ R√©capitulatif de Chapitre
-------------------------

.. center::

    .. image:: images/recap_chap2.png
        :alt: R√©capitulatif du Chapitre 2
        :width: 100%
           
       