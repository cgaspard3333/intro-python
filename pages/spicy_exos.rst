Exercices suppl√©mentaires
=========================
.. slide::
Sur cette page se trouvent des exercices suppl√©mentaires pour vous entra√Æner. Ils sont class√©s par niveau de difficult√© :
.. discoverList::
    * Facile : üçÄ
    * Moyen : ‚öñÔ∏è
    * Difficile : üå∂Ô∏è

.. slide::
üçÄ Exercice Sup. 1 : D√©terminer si une ann√©e est bissextile
---------------
.. step::
    Avant de commencer cet exercise vous devez faire quelques recherches sur internet pour savoir :
.. discoverList::
    * Qu‚Äôest-ce qu‚Äôune ann√©e bissextile ?
    * Comment peut-on tester si un nombre entier est divisible par un autre en Python ?

.. step::
**Consigne** : Ecrire un programme permettant de d√©terminer si l‚Äôann√©e saisie par l'utilisateur est bissextile ou non et lui afficher le resultat.

.. slide::
‚öñÔ∏è Exercice Sup. 2 : Triangle de Pascal
---------------
.. step::
    Ecrire un programme qui construit et affiche le traingle de Pascal de degr√© n
    .. warning::
        Exemple pour n = 6

        .. code-block:: text

            1  
            1  1  
            1  2  1  
            1  3  3  1  
            1  4  6  4  1  
            1  5 10 10  5  1  
            1  6 15 20 15  6  1  

**Astuces** : 
.. spoiler::
    .. discoverList::
        * Calculer et afficher seulement les valeurs jusqu‚Äô√† la diagonale principale incluse (Limiter le degr√© √† 13)  
        * Construire le triangle ligne par ligne
            - Initialiser le premier √©l√©ment et l‚Äô√©l√©ment de la diagonale √† 1.
            - Calculer les valeurs entre les √©l√©ments initialis√©s de gauche √† droite en utilisant la relation suivante : $$P_{i,j} = P_{i-1,j} + P_{i-1,j-1}$$


.. slide::
üå∂Ô∏è Exercice Sup. 3 : Les tours de Hano√Ø
---------------

**Consigne** : Vous devez √©crire une fonction en Python pour r√©soudre le probl√®me des tours de Hano√Ø en d√©pla√ßant des disques d'une tour √† une autre en suivant certaines r√®gles. Vous devez afficher la s√©quence des mouvements effectu√©s.

**R√®gles des Tours de Hano√Ø** :
.. discoverList::
    * Vous avez trois tours : A, B et C.
    * Il y a n disques de tailles diff√©rentes sur la tour A.
    * Vous devez d√©placer tous les disques de la tour A √† la tour C.
    * Vous ne pouvez d√©placer qu'un disque √† la fois.
    * Un disque plus grand ne peut jamais √™tre plac√© sur un disque plus petit.

**Astuce 1 ** :
.. spoiler::
    .. discoverList::
        * Utiliser la r√©cursivit√© pour r√©soudre ce probl√®me.
        * Si vous avez un seul disque, vous pouvez directement le d√©placer de la tour A √† la tour C.
        * Si vous avez plus d'un disque :
            - D√©placez les n-1 disques de la tour A √† la tour B (utilisez la tour C comme interm√©diaire).
            - D√©placez le disque restant de la tour A √† la tour C.
            - D√©placez les n-1 disques de la tour B √† la tour C (utilisez la tour A comme interm√©diaire).

**Astuce 2 ** :
.. spoiler::
    Impl√©mentez une fonction r√©cursive hanoi(n, A, B, C) qui d√©place n disques de la tour A √† la tour C en utilisant la tour B comme interm√©diaire.

    .. code-block:: python
        
        def hanoi(n, source, auxiliary, target):
            if n == 1:
                print(f"D√©placez le disque 1 de {source} √† {target}")
            else:
                # √âtape 1 : D√©placer n-1 disques de 'source' vers 'auxiliary' en utilisant 'target'
                # √âtape 2 : D√©placer le disque restant de 'source' vers 'target'
                # √âtape 3 : D√©placer les n-1 disques de 'auxiliary' vers 'target' en utilisant 'source'


.. slide::
üå∂Ô∏è Exercice Sup. 4 : Sudoku
---------------
**Consigne** : Vous devez √©crire un programme en Python pour r√©soudre un jeu de Sudoku 4x4. Vous devez afficher la solution du jeu.

Une grille de Sudoku 4x4 peut √™tre repr√©sent√©e comme une liste de listes de cette mani√®re :
.. code-block::
    _ = None
    grid = [
        [1, _, 2, 3],
        [_, _, 1, 4],
        [4, 1, _, _],
        [_, _, 4, 1]
    ]
**Note** : Ici, ``_`` repr√©sente une case vide.

.. step::
    **Question 1** : V√©rifier si la grille est correctement remplie  
    Cr√©ez une fonction ``is_grid_valid(grid)`` qui v√©rifie si la grille suit les r√®gles du Sudoku :
    .. discoverList::
        * Chaque ligne doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.
        * Chaque colonne doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.
        * Chaque sous-grille (2x2) doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.

.. step::
    **Question 2** : Trouver les valeurs possibles pour une cellule  
    Cr√©ez une fonction ``possible_values(grid, row, col)`` qui prend une grille et la position d'une case vide (ligne et colonne) et renvoie une liste des valeurs possibles pour cette case selon les r√®gles du Sudoku.

.. step::
    **Question 3** : R√©soudre la grille
        Cr√©ez une fonction ``solve(grid)`` qui essaie de remplir la grille Sudoku avec des valeurs valides. Utilisez une approche de type backtracking (√† rechercher sur internet) pour tester diff√©rentes possibilit√©s jusqu'√† trouver une solution.

**Astuce** :

.. spoiler::
    Squelette du programme :
    .. code-block:: python
        _ = None  # Utilisation de _ pour repr√©senter les cases vides (None)

        def is_row_valid(grid: list, row: int) -> bool:
            """
            V√©rifie si une ligne donn√©e est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne √† v√©rifier.
            
            Returns:
                bool: True si la ligne est valide, False sinon.
            """
        def is_column_valid(grid: list, col: int) -> bool:
            """
            V√©rifie si une colonne donn√©e est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                col (int): Le num√©ro de la colonne √† v√©rifier.
            
            Returns:
                bool: True si la colonne est valide, False sinon.
            """
        def is_subgrid_valid(grid: list, row: int, col: int) -> bool:
            """
            V√©rifie si une sous-grille 2x2 est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne de d√©part de la sous-grille.
                col (int): Le num√©ro de la colonne de d√©part de la sous-grille.
            
            Returns:
                bool: True si la sous-grille est valide, False sinon.
            """
        def is_grid_valid(grid: list) -> bool:
            """
            V√©rifie si toute la grille est valide en respectant les r√®gles du Sudoku.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
            
            Returns:
                bool: True si toute la grille est valide, False sinon.
            """
        def possible_values(grid: list, row: int, col: int) -> list:
            """
            Renvoie la liste des valeurs possibles pour une case vide donn√©e.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne de la case vide.
                col (int): Le num√©ro de la colonne de la case vide.
            
            Returns:
                list: Liste des valeurs possibles pour la case vide.
            """
        def solve(grid: list) -> bool:
            """
            R√©sout la grille Sudoku en utilisant une approche de backtracking.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
            
            Returns:
                bool: True si la grille est r√©solue, False sinon.
            """

.. slide::
üå∂Ô∏è Exercice Sup. 5 : Les tours de Hano√Ø (graphique)
---------------
.. step::
**Consigne** : Reprenez le code de l'exercice Sup. 3. Vous devez maintenant utiliser la biblioth√®que graphique pygame pour afficher la s√©quence des mouvements effectu√©s lors de la r√©solution du probl√®me des tours de Hano√Ø.  
Vous utiliserez 7 disques pour cet exercice.

