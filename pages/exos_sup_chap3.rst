üèãÔ∏è Exercices suppl√©mentaires
=========================
.. slide::
Sur cette page se trouvent des exercices suppl√©mentaires pour vous entra√Æner. Ils sont class√©s par niveau de difficult√© :
.. discoverList::
    * Facile : üçÄ
    * Moyen : ‚öñÔ∏è
    * Difficile : üå∂Ô∏è

.. slide::
üçÄ Exercice Sup. 6 : Le Jeu du Devin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : Vous devez √©crire un programme qui permet de trouver un nombre entier saisi par l'utilisateur en faisant le moins d'it√©ration possible (en faisant le moins de tentatives possible).

**Astuce** :
.. spoiler::
    Utilisez une m√©thode de recherche dichotomique pour r√©duire le nombre de tentatives.

**R√©sultat attendu** :
.. code-block:: python
        >> Bienvenue au jeu du devin !
        >> Veuillez choisir un nombre entre 1 et 100.
        >> Entrez un nombre entre 1 et 100 : 33
        >> Essai 1: Je pense que c est 50.
        >> C est trop haut.
        >> Essai 2: Je pense que c est 25.
        >> C est trop bas.
        >> Essai 3: Je pense que c est 37.
        >> C est trop haut.
        >> Essai 4: Je pense que c est 31.
        >> C est trop bas.
        >> Essai 5: Je pense que c est 34.
        >> C est trop haut.
        >> Essai 6: Je pense que c est 32.
        >> C est trop bas.
        >> Essai 7: Je pense que c est 33.
        >> J ai devin√© le nombre en 7 essais ! C √©tait bien 33.

.. slide::
üçÄ Exercice Sup. 7 : Le Jeu du Pendu
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : Vous devez √©crire un programme qui permet √† un utilisateur de jouer au jeu du pendu. Le but du jeu est de deviner un mot en proposant une lettre √† la fois. L'utilisateur a un nombre limit√© de tentatives pour deviner le mot avant de perdre.
.. discoverList::
    1. Le programme doit choisir un mot de mani√®re al√©atoire dans une liste pr√©d√©finie de mots.
    2. Le mot √† deviner doit √™tre affich√© sous forme de tirets (_) pour chaque lettre non encore devin√©e.
    3. √Ä chaque tour, l'utilisateur doit entrer une lettre.
    4. Si la lettre devin√©e est correcte (elle fait partie du mot), elle doit √™tre r√©v√©l√©e √† la ou les positions correspondantes dans le mot.
    5. Si la lettre est incorrecte, l'utilisateur perd une tentative.
    6. L'utilisateur a un nombre limit√© de tentatives (par exemple 6).
    7. Le jeu se termine soit lorsque l'utilisateur a devin√© toutes les lettres du mot, soit lorsqu'il n'a plus de tentatives restantes.

**R√®gles** :
.. discoverList::
    * Si l'utilisateur devine une lettre d√©j√† propos√©e, le programme doit l'informer.
    * Le programme doit indiquer apr√®s chaque tentative si la lettre est correcte ou incorrecte.
    * √Ä la fin du jeu, le programme doit afficher si l'utilisateur a gagn√© ou perdu, et r√©v√©ler le mot complet si n√©cessaire.
    * Si une lettre choisie √† plusieurs reprise par l‚Äôutilisateur est incorrecte, le nombre de tentatives restentes √† jouer ne diminue qu‚Äôune seule fois.

.. slide::
‚öñÔ∏è Exercice Sup. 8 : Les tours de Hano√Ø
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: images/Tower_of_Hanoi_4.gif
    :alt: Les tours de Hano√Ø
    :align: center

**Consigne** : Vous devez √©crire une fonction en Python pour r√©soudre le probl√®me des tours de Hano√Ø en d√©pla√ßant des disques d'une tour √† une autre en suivant certaines r√®gles. Vous devez afficher la s√©quence des mouvements effectu√©s.

**R√®gles des Tours de Hano√Ø** :
.. discoverList::
    * Vous avez trois tours : A, B et C.
    * Il y a n disques de tailles diff√©rentes sur la tour A.
    * Vous devez d√©placer tous les disques de la tour A √† la tour C.
    * Vous ne pouvez d√©placer qu'un disque √† la fois.
    * Un disque plus grand ne peut jamais √™tre plac√© sur un disque plus petit.

**Astuce 1 ** :
.. spoiler::
    .. discoverList::
        * Utiliser la r√©cursivit√© pour r√©soudre ce probl√®me.
        * Si vous avez un seul disque, vous pouvez directement le d√©placer de la tour A √† la tour C.
        * Si vous avez plus d'un disque :
            - D√©placez les n-1 disques de la tour A √† la tour B (utilisez la tour C comme interm√©diaire).
            - D√©placez le disque restant de la tour A √† la tour C.
            - D√©placez les n-1 disques de la tour B √† la tour C (utilisez la tour A comme interm√©diaire).

**Astuce 2 ** :
.. spoiler::
    Impl√©mentez une fonction r√©cursive hanoi(n, A, B, C) qui d√©place n disques de la tour A √† la tour C en utilisant la tour B comme interm√©diaire.

    .. code-block:: python
        
        def hanoi(n, source, auxiliary, target):
            if n == 1:
                print(f"D√©placez le disque 1 de {source} √† {target}")
            else:
                # √âtape 1 : D√©placer n-1 disques de 'source' vers 'auxiliary' en utilisant 'target'
                # √âtape 2 : D√©placer le disque restant de 'source' vers 'target'
                # √âtape 3 : D√©placer les n-1 disques de 'auxiliary' vers 'target' en utilisant 'source'


.. slide::
‚öñÔ∏è Exercice Sup. 9 : Le Grand Casino
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : Vous allez √©crire un programme qui permet √† un joueur de jouer √† deux jeux de casino populaires : la roulette et le blackjack. L'utilisateur pourra parier de l'argent fictif et tenter de gagner ou de perdre en fonction des r√®gles des deux jeux. Vous pourrez amender ensuite le Casino avec d‚Äôautres jeux de votre choix.

.. step:: reset
**Etape 1 : Casino**

* Le joueur d√©marre avec une somme d'argent fictif (par exemple, 1000‚Ç¨).
* Le programme doit proposer √† l'utilisateur de choisir entre :
    * La roulette
    * Le blackjack
    * Quitter le casino
* Apr√®s chaque jeu, le montant d'argent restant doit √™tre mis √† jour, en fonction des gains ou pertes du joueur.

.. step::
**Etape 2 : Roulette**

* Le joueur peut parier un montant et choisir entre :
    * Parier sur une couleur : rouge ou noir.
    * Parier sur un nombre : entre 0 et 36.
* Un nombre al√©atoire entre 0 et 36 est tir√© par la roulette.
* Si le joueur parie sur la bonne couleur, il double sa mise.
* Si le joueur parie sur le bon nombre, il gagne 35 fois sa mise.
* Si le pari est perdu, la mise est d√©duite de l'argent du joueur.

.. step::
**Etape 3 : Blackjack**

* Le joueur peut parier un montant et re√ßoit deux cartes.
* Le croupier re√ßoit √©galement deux cartes, dont une seule est visible.
* Le joueur doit choisir s'il veut "tirer" une nouvelle carte ou "rester".
* Le but est d'avoir une main dont la somme des valeurs ne d√©passe pas 21, tout en √©tant sup√©rieure √† celle du croupier.
* Le croupier doit continuer √† tirer des cartes jusqu'√† ce que sa main atteigne un score d'au moins 17.
* Le joueur gagne s'il a un meilleur score que le croupier sans d√©passer 21.
* Si le joueur d√©passe 21, il perd automatiquement.
* En cas de victoire, le joueur r√©cup√®re le double de sa mise.

.. step::
**Etape 4 : Fin du jeu**

* Le jeu continue tant que le joueur a de l'argent.
* Le joueur peut choisir de quitter √† tout moment.


.. slide::
üå∂Ô∏è Exercice Sup. 10 : Sudoku
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Consigne** : Vous devez √©crire un programme en Python pour r√©soudre un jeu de Sudoku 4x4. Vous devez afficher la solution du jeu.

Une grille de Sudoku 4x4 peut √™tre repr√©sent√©e comme une liste de listes de cette mani√®re :
.. code-block::
    _ = None
    grid = [
        [1, _, 2, 3],
        [_, _, 1, 4],
        [4, 1, _, _],
        [_, _, 4, 1]
    ]
**Note** : Ici, ``_`` repr√©sente une case vide.

**R√®gles du Sudoku** :
.. discoverList::
    * Chaque ligne doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.
    * Chaque colonne doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.
    * Chaque sous-grille (2x2) doit contenir les chiffres de 1 √† 4 sans r√©p√©tition.

.. step:: reset
    **Question 1** : V√©rifier si la grille est correctement remplie  
    Cr√©ez une fonction ``is_grid_valid(grid)`` qui v√©rifie si la grille suit les r√®gles du Sudoku.

.. step::
    **Question 2** : Trouver les valeurs possibles pour une cellule  
    Cr√©ez une fonction ``possible_values(grid, row, col)`` qui prend une grille et la position d'une case vide (ligne et colonne) et renvoie une liste des valeurs possibles pour cette case selon les r√®gles du Sudoku.

.. step::
    **Question 3** : R√©soudre la grille
        Cr√©ez une fonction ``solve(grid)`` qui essaie de remplir la grille Sudoku avec des valeurs valides. Utilisez une approche de type backtracking (√† rechercher sur internet) pour tester diff√©rentes possibilit√©s jusqu'√† trouver une solution.

**Astuce** :

.. spoiler::
    Squelette du programme :
    .. code-block:: python
        _ = None  # Utilisation de _ pour repr√©senter les cases vides (None)

        def is_row_valid(grid: list, row: int) -> bool:
            """
            V√©rifie si une ligne donn√©e est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne √† v√©rifier.
            
            Returns:
                bool: True si la ligne est valide, False sinon.
            """
        def is_column_valid(grid: list, col: int) -> bool:
            """
            V√©rifie si une colonne donn√©e est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                col (int): Le num√©ro de la colonne √† v√©rifier.
            
            Returns:
                bool: True si la colonne est valide, False sinon.
            """
        def is_subgrid_valid(grid: list, row: int, col: int) -> bool:
            """
            V√©rifie si une sous-grille 2x2 est valide :
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne de d√©part de la sous-grille.
                col (int): Le num√©ro de la colonne de d√©part de la sous-grille.
            
            Returns:
                bool: True si la sous-grille est valide, False sinon.
            """
        def is_grid_valid(grid: list) -> bool:
            """
            V√©rifie si toute la grille est valide en respectant les r√®gles du Sudoku.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
            
            Returns:
                bool: True si toute la grille est valide, False sinon.
            """
        def possible_values(grid: list, row: int, col: int) -> list:
            """
            Renvoie la liste des valeurs possibles pour une case vide donn√©e.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
                row (int): Le num√©ro de la ligne de la case vide.
                col (int): Le num√©ro de la colonne de la case vide.
            
            Returns:
                list: Liste des valeurs possibles pour la case vide.
            """
        def solve(grid: list) -> bool:
            """
            R√©sout la grille Sudoku en utilisant une approche de backtracking.
            
            Args:
                grid (list): La grille du Sudoku 4x4.
            
            Returns:
                bool: True si la grille est r√©solue, False sinon.
            """

.. slide::
üå∂Ô∏è Exercice Sup. 11 : Le Carr√© Magique
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : Vous devez √©crire un programme en Python pour r√©soudre un carr√© magique d'ordre n saisi au clavier par l'utilisateur et afficher la solution.

**R√®gles du Carr√© Magique** :
.. discoverList::
    * Un carr√© magique est une matrice carr√©e de taille n x n contenant les nombres entiers de 1 √† n¬≤.
    * La somme de chaque ligne, de chaque colonne et des deux diagonales principales doit √™tre √©gale.
    * La somme de chaque ligne, de chaque colonne et des deux diagonales principales est appel√©e la constante magique et est √©gale √† n(n¬≤+1)/2.

.. warning::
    Exemple d'un carr√© magique d'ordre 3 :
    .. code-block::
        #    +---+---+---+
        #    | 8 | 1 | 6 | 15
        #    +---+---+---+
        #    | 3 | 5 | 7 | 15
        #    +---+---+---+
        #    | 4 | 9 | 2 | 15
        #    +---+---+---+
        #   / 15   15  15 \
        # 15                15

**Astuce** :
.. spoiler::
    Utilisez le proc√©d√© de La Loub√®re pour g√©n√©rer un carr√© magique d'ordre impair.

**R√©sultat attendu** :
.. code-block:: python
    >> Saisir l'ordre du carr√© magique : 5
    >> Carr√© magique d'ordre 5 :
    >> +----+----+----+----+----+
    >> | 17 | 24 |  1 |  8 | 15 |
    >> +----+----+----+----+----+
    >> | 23 |  5 |  7 | 14 | 16 |
    >> +----+----+----+----+----+
    >> |  4 |  6 | 13 | 20 | 22 |
    >> +----+----+----+----+----+
    >> | 10 | 12 | 19 | 21 |  3 |
    >> +----+----+----+----+----+
    >> | 11 | 18 | 25 |  2 |  9 |
    >> +----+----+----+----+----+
    >> La constante magique est 65.

.. slide::
üå∂Ô∏è Exercice Sup. 12 : Le Jeu d'Echecs "Simple"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Consigne** : Impl√©mentez un jeu d'√©checs, permettant √† deux joueurs de d√©placer leurs pi√®ces √† tour de r√¥le, en saisissant au clavier les coups √† jouer. Le jeu doit afficher un √©chiquier avec les pi√®ces blanches en bas et les pi√®ces noires en haut, comme dans une v√©ritable partie d'√©checs. Vous pouvez coloriser les affichage en utilisant `Colorama <https://pypi.org/project/colorama/>`_ (qui s‚Äôinstalle avec ``pip install colorama``). Par exemple, vous pouvez utiliser la couleur rouge pour les pi√®ces noires.

**R√®gles du Jeu d'Echecs "Simple"** :  
Le programme ne prend pas en compte toutes les r√®gles du jeu d'√©checs. Par exemple :
    .. discoverList::
        * Les mouvements sp√©cifiques √† chaque type de pi√®ce ne sont pas g√©r√©s (tous les coups sont permis tant que la case d'arriv√©e est valide).
        * Il n'y a pas de gestion de l'√©chec et mat et de la promotion de pions.
        * Les joueurs doivent simplement saisir des mouvements valides (les coups non conformes sont rejet√©s).

**Astuce** :
.. spoiler::
    .. discoverList::
        * Le plateau doit √™tre initialis√© avec les pi√®ces blanches plac√©es sur les deux premi√®res rang√©es (lignes 1 et 2) et les pi√®ces noires sur les deux derni√®res rang√©es (lignes 7 et 8).
        * Chaque case du plateau est repr√©sent√©e par une cl√© (comme a1, b2, etc.), et les pi√®ces sont mod√©lis√©es par des cha√Ænes de caract√®res (ex: 'Pion_blanc' pour un pion blanc, 'Tour_noire' pour une tour noire).
        * √Ä chaque tour, le programme demande au joueur de saisir la position de d√©part et la position d'arriv√©e d'une pi√®ce.
        * Le programme v√©rifie si la position de d√©part contient une pi√®ce appartenant au joueur en cours (blanc ou noir), si le mouvement ne capture pas une pi√®ce de son propre camp, et si la destination est une case valide.
        * Si le mouvement est valide, la pi√®ce est d√©plac√©e sur le plateau, et c'est au tour de l'autre joueur de jouer.
        * Le joueur blanc commence la partie. Le programme doit alterner entre les deux joueurs apr√®s chaque coup.
        * Si un joueur tente de d√©placer une pi√®ce qui n'est pas la sienne ou d'effectuer un coup ill√©gal, le programme doit afficher un message d'erreur et redemander la saisie.

**R√©sultat attendu** :
.. code-block::
    >> Plateau d √©checs:
    >> T C F R R F C T
    >> P P P P P P P P
    >> . . . . . . . .
    >> . . . . . . . .
    >> . . . . . . . .
    >> . . . . . . . .
    >> P P P P P P P P
    >> T C F R R F C T
 
    >> Tour du joueur blanc.
    >> Entrez la position de d√©part (ex : e2) : e2
    >> Entrez la position d arriv√©e (ex : e4) : e4
 
    >> Plateau d √©checs:
    >> T C F R R F C T
    >> P P P P P P P P
    >> . . . . . . . .
    >> . . . . P . . .
    >> . . . . . . . .
    >> . . . . . . . .
    >> P P P P . P P P
    >> T C F R R F C T

    >> Tour du joueur noir.
    >> Entrez la position de d√©part (ex : e2) : e
    >> Entrez la position d arriv√©e (ex : e4) : 7
    >> Positions non valides. R√©essayez.